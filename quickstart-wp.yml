---
apiVersion: v1
kind: Template
labels:
  app: wordpress-mysql-persistent
  template: wordpress-mysql-persistent
message: |-
  The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/wordpress-ex/blob/master/README.md.
metadata:
  annotations:
    description: An example WordPress application with a MySQL database. For more information
      about using this template, including OpenShift considerations, see https://github.com/sclorg/wordpress-ex/blob/master/README.md.
    iconClass: icon-php
    openshift.io/display-name: WordPress + MySQL
    openshift.io/documentation-url: https://github.com/wordpress/wordpress
    openshift.io/long-description: This template defines resources needed to develop
      a WordPress application, including a build configuration, application deployment
      configuration, and database deployment configuration.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
    tags: quickstart,php,wordpress
    template.openshift.io/bindable: 'false'
  name: wordpress-mysql-persistent
  namespace: openshift
objects:
- apiVersion: v1
  data:
    www.conf: |
      ; Start a new pool named 'www'.
      ; the variable $pool can be used in any directive and will be replaced by the
      ; pool name ('www' here)
      [www]
      listen = /var/run/www.sock

      listen.mode = 0660
      ;access.log = /proc/self/fd/2
      ;access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"

      pm = dynamic
      pm.max_children = 5
      pm.start_servers = 2
      pm.min_spare_servers = 1
      pm.max_spare_servers = 3
      ;pm.process_idle_timeout = 10s;
      ;pm.max_requests = 500
      php_admin_value[open_basedir] = "/tmp:/opt/app-root/src:/usr/local/lib/php"
      php_admin_value[session.save_path] = "/tmp"
      php_admin_value[soap.wsdl_cache_dir] = "/tmp"
      php_admin_value[sys_temp_dir] = "/tmp"
      php_admin_value[upload_tmp_dir] = "/var/tmp"
      env[TMP] = /tmp
      env[TMPDIR] = /tmp
      env[TEMP] = /tmp
  kind: ConfigMap
  metadata:
    name: "${NAME}-php"
- apiVersion: v1
  data:
    default.conf: |
                    include /etc/nginx/conection_params;
                    include /etc/nginx/cache_params;
                    include /etc/nginx/gzip_params;
                    include /etc/nginx/rewrite_server;
                    #include naxsi/naxsi_core.rules;


                    # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
                    # scheme used to connect to this server
                    #map $http_x_forwarded_proto $proxy_x_forwarded_proto {
                    #  default $http_x_forwarded_proto;
                    #  ''      $scheme;
                    #}

                    # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
                    # Connection header that may have been passed to this server
                    #map $http_upgrade $proxy_connection {
                    #  default upgrade;
                    #  '' close;
                    #}


                    server {
                        listen 8080 default_server;
                        server_name _;

                        access_log off;

                        include server_cache_params;

                        # this prevents hidden files (beginning with a period) from being served
                        location ~ /\.          { access_log off; log_not_found off; deny all; }

                            root {{HOME}};
                            index index.html index.htm index.php;

                            location / {
                                try_files $uri $uri/ /index.php$is_args$args;
                            }


                            location ~* .(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
                                    expires max;
                                    log_not_found off;
                                    access_log off;
                                    aio threads=default;
                            }
                            location = /robots.txt {
                                    access_log off;
                                    log_not_found off;
                            }
                            location = /favicon.ico {
                              expires max;
                              log_not_found off;
                              access_log off;
                            }


                            location ~ \.(hh|php)$ {
                                try_files $uri =404;

                                ## Naxsi rules
                                #include fastcgi_naxsi_params

                                #Bypass cache
                                {{NGINX_CACHE}}


                                include fastcgi_cache_params;

                                fastcgi_pass_header 'Accept-Encoding ""';

                                #fastcgi_pass 127.0.0.1:9000;
                                fastcgi_pass  unix:/var/run/www.sock;
                                fastcgi_index index.php;
                                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                                fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                                fastcgi_param HTTPS $fe_https;

                                include fastcgi_params;

                            }

                    }

                    # server {
                    #     listen       8080 default_server;
                    #     server_name  _;
                    #     return       301 http://{{DOMAIN_PROD}};
                    # }
  kind: ConfigMap
  metadata:
    name: ${NAME}-nginx
- apiVersion: v1
  kind: Secret
  metadata:
    name: "${NAME}"
  stringData:
    wordpress-secret-token: "${WP_SECRET_TOKEN}"
    wordpress-security-salt: "${WP_SECURITY_SALT}"
    database-password: "${DATABASE_PASSWORD}"
    database-user: "${DATABASE_USER}"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
        "kind": "Service"}]'
    name: "${NAME}"
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: "${NAME}"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
        "kind": "Service"}]'
    name: "${NAME}-dev"
  spec:
    ports:
    - name: web
      port: 8081
      targetPort: 8081
    selector:
      name: "${NAME}"      
- apiVersion: v1
  kind: Route
  metadata:
    name: "${NAME}"
  spec:
    host: "${APPLICATION_DOMAIN}"
    to:
      kind: Service
      name: "${NAME}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: "${NAME}"
  spec:
    replicas: 1
    selector:
      name: "${NAME}"
    strategy:
      recreateParams:
        pre:
          execNewPod:
            command:
            - "/usr/libexec/s2i/bin/migrate-database.sh"
            containerName: php
          failurePolicy: Retry
      type: Recreate
    template:
      metadata:
        labels:
          name: "${NAME}"
        name: "${NAME}"
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_NAME
            value: "${DATABASE_SERVICE_NAME}"
          - name: DATABASE_ENGINE
            value: "${DATABASE_ENGINE}"
          - name: DATABASE_NAME
            value: "${DATABASE_NAME}"
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: "${NAME}"
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: "${NAME}"
          - name: WP_SECRET_TOKEN
            valueFrom:
              secretKeyRef:
                key: wordpress-secret-token
                name: "${NAME}"
          - name: WP_SECURITY_SALT
            valueFrom:
              secretKeyRef:
                key: wordpress-security-salt
                name: "${NAME}"
          - name: OPCACHE_REVALIDATE_FREQ
            value: "${OPCACHE_REVALIDATE_FREQ}"
          image: "php"
          name: php
          volumeMounts:
          - mountPath: "/tmp"
            name: "tmp"           
          - mountPath: "/var/run"
            name: "run"
          - mountPath: "/opt/app-root/etc/php-fpm.d"
            name: "php-config"
          - mountPath: "/opt/app-root/src"
            name: "${NAME}-data"                    
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
        - env:
          - name: DOMAIN_PROD
            value: "${APPLICATION_DOMAIN}"
          image: "docker.io/oondeo/nginx"  
          name: "nginx"      
          livenessProbe:
            httpGet:
              path: "/health.php"
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 3
          ports:
          - containerPort: 8080
          - containerPort: 8081
          readinessProbe:
            httpGet:
              path: "/health.php"
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 60
            timeoutSeconds: 3
          volumeMounts:
          - mountPath: "/opt/app-root/etc/conf.d"
            name: "nginx-config"          
          - mountPath: "/opt/app-root/src"
            name: "${NAME}-data"
          - mountPath: "/var/run"
            name: "run" 
          - mountPath: "/tmp"
            name: "tmp"                        
        volumes:
        - name: "run"
          emptyDir: {}
        - name: "tmp"
          emptyDir:
            medium: Memory
            sizeLimit: "2Gi"
        - name: "php-config"
          configMap:
            name: "${NAME}-php"
        - name: "nginx-config"
          configMap:
            name: "${NAME}-nginx"                     
        - name: "${NAME}-data"
          persistentVolumeClaim:
            claimName: "${NAME}"
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - php
        from:
          kind: ImageStreamTag
          name: "php:7.2"
          namespace: "${NAMESPACE}"
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    storageClassName: local-storage
    resources:
      requests:
        storage: "${DB_VOLUME_CAPACITY}"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    storageClassName: local-storage
    resources:
      requests:
        storage: "${VOLUME_CAPACITY}"        
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    ports:
    - name: mysql
      port: 3306
      targetPort: 3306
    selector:
      name: "${DATABASE_SERVICE_NAME}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: "${DATABASE_SERVICE_NAME}"
        name: "${DATABASE_SERVICE_NAME}"
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: "${NAME}"
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: "${NAME}"
          - name: MYSQL_DATABASE
            value: "${DATABASE_NAME}"
          image: " "
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mysql
          ports:
          - containerPort: 3306
          readinessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER}
                -D ${DATABASE_NAME} -e 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: "${MEMORY_MYSQL_LIMIT}"
          volumeMounts:
          - mountPath: "/var/lib/mysql/data"
            name: "${DATABASE_SERVICE_NAME}-data"
          - mountPath: "/tmp"
            name: "tmp"  
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          persistentVolumeClaim:
            claimName: "${DATABASE_SERVICE_NAME}"
        - name: "tmp"
          emptyDir:
            medium: Memory
            sizeLimit: "1Gi"            
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mariadb:10.2
          namespace: "${NAMESPACE}"
      type: ImageChange
    - type: ConfigChange
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: wordpress-mysql-persistent
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
- description: Version of PHP image to be used (7.1 or latest).
  displayName: PHP Version
  name: PHP_VERSION
  required: true
  value: '7.2'
- description: Maximum amount of memory the WordPress container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Maximum amount of memory the MySQL container can use.
  displayName: Memory Limit (MySQL)
  name: MEMORY_MYSQL_LIMIT
  required: true
  value: 512Mi
- description: Volume space available for data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 2Gi
- description: Volume space available for db, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: DB_VOLUME_CAPACITY
  required: true
  value: 1Gi  
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/sclorg/wordpress-ex.git
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: The exposed hostname that will route to the WordPress service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
  value: ''
- description: Github trigger secret.  A difficult to guess string encoded as part
    of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: "[a-zA-Z0-9]{40}"
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mysql
- description: 'Database engine: postgresql, mysql or sqlite (default).'
  displayName: Database Engine
  name: DATABASE_ENGINE
  required: true
  value: mysql
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: default
- displayName: Database User
  name: DATABASE_USER
  required: true
  value: wordpress
- displayName: Database Password
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  name: DATABASE_PASSWORD
- description: Set this to a long random string.
  displayName: WordPress secret token
  from: "[\\w]{50}"
  generate: expression
  name: WP_SECRET_TOKEN
- description: Security salt for session hash.
  displayName: WordPress Security Salt
  from: "[a-zA-Z0-9]{40}"
  generate: expression
  name: WP_SECURITY_SALT
- description: How often to check script timestamps for updates, in seconds. 0 will
    result in OPcache checking for updates on every request.
  displayName: OPcache Revalidation Frequency
  name: OPCACHE_REVALIDATE_FREQ
  value: '2'
- description: The custom Composer mirror URL
  displayName: Custom Composer Mirror URL
  name: COMPOSER_MIRROR
  value: ''
