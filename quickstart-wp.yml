---
apiVersion: v1
kind: Template
labels:
  app: wordpress-mysql-persistent
  template: wordpress-mysql-persistent
message: |-
  The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/wordpress-ex/blob/master/README.md.
metadata:
  annotations:
    description: An example WordPress application with a MySQL database. For more information
      about using this template, including OpenShift considerations, see https://github.com/sclorg/wordpress-ex/blob/master/README.md.
    iconClass: icon-php
    openshift.io/display-name: WordPress + MySQL
    openshift.io/documentation-url: https://github.com/wordpress/wordpress
    openshift.io/long-description: This template defines resources needed to develop
      a WordPress application, including a build configuration, application deployment
      configuration, and database deployment configuration.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
    tags: quickstart,php,wordpress
    template.openshift.io/bindable: 'false'
  name: wordpress-mysql-persistent
  namespace: openshift
objects:
- apiVersion: v1
  data:
    www.conf: |
      ; Start a new pool named 'www'.
      ; the variable $pool can be used in any directive and will be replaced by the
      ; pool name ('www' here)
      [www]

      ; Per pool prefix
      ; It only applies on the following directives:
      ; - 'access.log'
      ; - 'slowlog'
      ; - 'listen' (unixsocket)
      ; - 'chroot'
      ; - 'chdir'
      ; - 'php_values'
      ; - 'php_admin_values'
      ; When not set, the global prefix (or NONE) applies instead.
      ; Note: This directive can also be relative to the global prefix.
      ; Default Value: none
      ;prefix = /path/to/pools/$pool

      ; Unix user/group of processes
      ; Note: The user is mandatory. If the group is not set, the default user's group
      ;       will be used.
      user = default
      group = root

      ; The address on which to accept FastCGI requests.
      ; Valid syntaxes are:
      ;   'ip.add.re.ss:port'    - to listen on a TCP socket to a specific IPv4 address on
      ;                            a specific port;
      ;   '[ip:6:addr:ess]:port' - to listen on a TCP socket to a specific IPv6 address on
      ;                            a specific port;
      ;   'port'                 - to listen on a TCP socket to all addresses
      ;                            (IPv6 and IPv4-mapped) on a specific port;
      ;   '/path/to/unix/socket' - to listen on a unix socket.
      ; Note: This value is mandatory.
      listen = 127.0.0.1:9000

      ; Set listen(2) backlog.
      ; Default Value: 511 (-1 on FreeBSD and OpenBSD)
      ;listen.backlog = 511

      ; Set permissions for unix socket, if one is used. In Linux, read/write
      ; permissions must be set in order to allow connections from a web server. Many
      ; BSD-derived systems allow connections regardless of permissions.
      ; Default Values: user and group are set as the running user
      ;                 mode is set to 0660
      ;listen.owner = www-data
      ;listen.group = www-data
      ;listen.mode = 0660
      ; When POSIX Access Control Lists are supported you can set them using
      ; these options, value is a comma separated list of user/group names.
      ; When set, listen.owner and listen.group are ignored
      ;listen.acl_users =
      ;listen.acl_groups =

      ; List of addresses (IPv4/IPv6) of FastCGI clients which are allowed to connect.
      ; Equivalent to the FCGI_WEB_SERVER_ADDRS environment variable in the original
      ; PHP FCGI (5.2.2+). Makes sense only with a tcp listening socket. Each address
      ; must be separated by a comma. If this value is left blank, connections will be
      ; accepted from any ip address.
      ; Default Value: any
      ;listen.allowed_clients = 127.0.0.1

      ; Specify the nice(2) priority to apply to the pool processes (only if set)
      ; The value can vary from -19 (highest priority) to 20 (lower priority)
      ; Note: - It will only work if the FPM master process is launched as root
      ;       - The pool processes will inherit the master process priority
      ;         unless it specified otherwise
      ; Default Value: no set
      ; process.priority = -19

      ; Set the process dumpable flag (PR_SET_DUMPABLE prctl) even if the process user
      ; or group is differrent than the master process user. It allows to create process
      ; core dump and ptrace the process for the pool user.
      ; Default Value: no
      ; process.dumpable = yes

      ; Choose how the process manager will control the number of child processes.
      ; Possible Values:
      ;   static  - a fixed number (pm.max_children) of child processes;
      ;   dynamic - the number of child processes are set dynamically based on the
      ;             following directives. With this process management, there will be
      ;             always at least 1 children.
      ;             pm.max_children      - the maximum number of children that can
      ;                                    be alive at the same time.
      ;             pm.start_servers     - the number of children created on startup.
      ;             pm.min_spare_servers - the minimum number of children in 'idle'
      ;                                    state (waiting to process). If the number
      ;                                    of 'idle' processes is less than this
      ;                                    number then some children will be created.
      ;             pm.max_spare_servers - the maximum number of children in 'idle'
      ;                                    state (waiting to process). If the number
      ;                                    of 'idle' processes is greater than this
      ;                                    number then some children will be killed.
      ;  ondemand - no children are created at startup. Children will be forked when
      ;             new requests will connect. The following parameter are used:
      ;             pm.max_children           - the maximum number of children that
      ;                                         can be alive at the same time.
      ;             pm.process_idle_timeout   - The number of seconds after which
      ;                                         an idle process will be killed.
      ; Note: This value is mandatory.
      pm = dynamic

      ; The number of child processes to be created when pm is set to 'static' and the
      ; maximum number of child processes when pm is set to 'dynamic' or 'ondemand'.
      ; This value sets the limit on the number of simultaneous requests that will be
      ; served. Equivalent to the ApacheMaxClients directive with mpm_prefork.
      ; Equivalent to the PHP_FCGI_CHILDREN environment variable in the original PHP
      ; CGI. The below defaults are based on a server without much resources. Don't
      ; forget to tweak pm.* to fit your needs.
      ; Note: Used when pm is set to 'static', 'dynamic' or 'ondemand'
      ; Note: This value is mandatory.
      pm.max_children = 5

      ; The number of child processes created on startup.
      ; Note: Used only when pm is set to 'dynamic'
      ; Default Value: min_spare_servers + (max_spare_servers - min_spare_servers) / 2
      pm.start_servers = 2

      ; The desired minimum number of idle server processes.
      ; Note: Used only when pm is set to 'dynamic'
      ; Note: Mandatory when pm is set to 'dynamic'
      pm.min_spare_servers = 1

      ; The desired maximum number of idle server processes.
      ; Note: Used only when pm is set to 'dynamic'
      ; Note: Mandatory when pm is set to 'dynamic'
      pm.max_spare_servers = 3

      ; The number of seconds after which an idle process will be killed.
      ; Note: Used only when pm is set to 'ondemand'
      ; Default Value: 10s
      ;pm.process_idle_timeout = 10s;

      ; The number of requests each child process should execute before respawning.
      ; This can be useful to work around memory leaks in 3rd party libraries. For
      ; endless request processing specify '0'. Equivalent to PHP_FCGI_MAX_REQUESTS.
      ; Default Value: 0
      ;pm.max_requests = 500

      ; The URI to view the FPM status page. If this value is not set, no URI will be
      ; recognized as a status page. It shows the following informations:
      ;   pool                 - the name of the pool;
      ;   process manager      - static, dynamic or ondemand;
      ;   start time           - the date and time FPM has started;
      ;   start since          - number of seconds since FPM has started;
      ;   accepted conn        - the number of request accepted by the pool;
      ;   listen queue         - the number of request in the queue of pending
      ;                          connections (see backlog in listen(2));
      ;   max listen queue     - the maximum number of requests in the queue
      ;                          of pending connections since FPM has started;
      ;   listen queue len     - the size of the socket queue of pending connections;
      ;   idle processes       - the number of idle processes;
      ;   active processes     - the number of active processes;
      ;   total processes      - the number of idle + active processes;
      ;   max active processes - the maximum number of active processes since FPM
      ;                          has started;
      ;   max children reached - number of times, the process limit has been reached,
      ;                          when pm tries to start more children (works only for
      ;                          pm 'dynamic' and 'ondemand');
      ; Value are updated in real time.
      ; Example output:
      ;   pool:                 www
      ;   process manager:      static
      ;   start time:           01/Jul/2011:17:53:49 +0200
      ;   start since:          62636
      ;   accepted conn:        190460
      ;   listen queue:         0
      ;   max listen queue:     1
      ;   listen queue len:     42
      ;   idle processes:       4
      ;   active processes:     11
      ;   total processes:      15
      ;   max active processes: 12
      ;   max children reached: 0
      ;
      ; By default the status page output is formatted as text/plain. Passing either
      ; 'html', 'xml' or 'json' in the query string will return the corresponding
      ; output syntax. Example:
      ;   http://www.foo.bar/status
      ;   http://www.foo.bar/status?json
      ;   http://www.foo.bar/status?html
      ;   http://www.foo.bar/status?xml
      ;
      ; By default the status page only outputs short status. Passing 'full' in the
      ; query string will also return status for each pool process.
      ; Example:
      ;   http://www.foo.bar/status?full
      ;   http://www.foo.bar/status?json&full
      ;   http://www.foo.bar/status?html&full
      ;   http://www.foo.bar/status?xml&full
      ; The Full status returns for each process:
      ;   pid                  - the PID of the process;
      ;   state                - the state of the process (Idle, Running, ...);
      ;   start time           - the date and time the process has started;
      ;   start since          - the number of seconds since the process has started;
      ;   requests             - the number of requests the process has served;
      ;   request duration     - the duration in µs of the requests;
      ;   request method       - the request method (GET, POST, ...);
      ;   request URI          - the request URI with the query string;
      ;   content length       - the content length of the request (only with POST);
      ;   user                 - the user (PHP_AUTH_USER) (or '-' if not set);
      ;   script               - the main script called (or '-' if not set);
      ;   last request cpu     - the %cpu the last request consumed
      ;                          it's always 0 if the process is not in Idle state
      ;                          because CPU calculation is done when the request
      ;                          processing has terminated;
      ;   last request memory  - the max amount of memory the last request consumed
      ;                          it's always 0 if the process is not in Idle state
      ;                          because memory calculation is done when the request
      ;                          processing has terminated;
      ; If the process is in Idle state, then informations are related to the
      ; last request the process has served. Otherwise informations are related to
      ; the current request being served.
      ; Example output:
      ;   ************************
      ;   pid:                  31330
      ;   state:                Running
      ;   start time:           01/Jul/2011:17:53:49 +0200
      ;   start since:          63087
      ;   requests:             12808
      ;   request duration:     1250261
      ;   request method:       GET
      ;   request URI:          /test_mem.php?N=10000
      ;   content length:       0
      ;   user:                 -
      ;   script:               /home/fat/web/docs/php/test_mem.php
      ;   last request cpu:     0.00
      ;   last request memory:  0
      ;
      ; Note: There is a real-time FPM status monitoring sample web page available
      ;       It's available in: /usr/local/share/php/fpm/status.html
      ;
      ; Note: The value must start with a leading slash (/). The value can be
      ;       anything, but it may not be a good idea to use the .php extension or it
      ;       may conflict with a real PHP file.
      ; Default Value: not set
      ;pm.status_path = /status

      ; The ping URI to call the monitoring page of FPM. If this value is not set, no
      ; URI will be recognized as a ping page. This could be used to test from outside
      ; that FPM is alive and responding, or to
      ; - create a graph of FPM availability (rrd or such);
      ; - remove a server from a group if it is not responding (load balancing);
      ; - trigger alerts for the operating team (24/7).
      ; Note: The value must start with a leading slash (/). The value can be
      ;       anything, but it may not be a good idea to use the .php extension or it
      ;       may conflict with a real PHP file.
      ; Default Value: not set
      ;ping.path = /ping

      ; This directive may be used to customize the response of a ping request. The
      ; response is formatted as text/plain with a 200 response code.
      ; Default Value: pong
      ;ping.response = pong

      ; The access log file
      ; Default: not set
      ;access.log = log/$pool.access.log

      ; The access log format.
      ; The following syntax is allowed
      ;  %%: the '%' character
      ;  %C: %CPU used by the request
      ;      it can accept the following format:
      ;      - %{user}C for user CPU only
      ;      - %{system}C for system CPU only
      ;      - %{total}C  for user + system CPU (default)
      ;  %d: time taken to serve the request
      ;      it can accept the following format:
      ;      - %{seconds}d (default)
      ;      - %{miliseconds}d
      ;      - %{mili}d
      ;      - %{microseconds}d
      ;      - %{micro}d
      ;  %e: an environment variable (same as $_ENV or $_SERVER)
      ;      it must be associated with embraces to specify the name of the env
      ;      variable. Some exemples:
      ;      - server specifics like: %{REQUEST_METHOD}e or %{SERVER_PROTOCOL}e
      ;      - HTTP headers like: %{HTTP_HOST}e or %{HTTP_USER_AGENT}e
      ;  %f: script filename
      ;  %l: content-length of the request (for POST request only)
      ;  %m: request method
      ;  %M: peak of memory allocated by PHP
      ;      it can accept the following format:
      ;      - %{bytes}M (default)
      ;      - %{kilobytes}M
      ;      - %{kilo}M
      ;      - %{megabytes}M
      ;      - %{mega}M
      ;  %n: pool name
      ;  %o: output header
      ;      it must be associated with embraces to specify the name of the header:
      ;      - %{Content-Type}o
      ;      - %{X-Powered-By}o
      ;      - %{Transfert-Encoding}o
      ;      - ....
      ;  %p: PID of the child that serviced the request
      ;  %P: PID of the parent of the child that serviced the request
      ;  %q: the query string
      ;  %Q: the '?' character if query string exists
      ;  %r: the request URI (without the query string, see %q and %Q)
      ;  %R: remote IP address
      ;  %s: status (response code)
      ;  %t: server time the request was received
      ;      it can accept a strftime(3) format:
      ;      %d/%b/%Y:%H:%M:%S %z (default)
      ;      The strftime(3) format must be encapsuled in a %{<strftime_format>}t tag
      ;      e.g. for a ISO8601 formatted timestring, use: %{%Y-%m-%dT%H:%M:%S%z}t
      ;  %T: time the log has been written (the request has finished)
      ;      it can accept a strftime(3) format:
      ;      %d/%b/%Y:%H:%M:%S %z (default)
      ;      The strftime(3) format must be encapsuled in a %{<strftime_format>}t tag
      ;      e.g. for a ISO8601 formatted timestring, use: %{%Y-%m-%dT%H:%M:%S%z}t
      ;  %u: remote user
      ;
      ; Default: "%R - %u %t \"%m %r\" %s"
      ;access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"

      ; The log file for slow requests
      ; Default Value: not set
      ; Note: slowlog is mandatory if request_slowlog_timeout is set
      ;slowlog = log/$pool.log.slow

      ; The timeout for serving a single request after which a PHP backtrace will be
      ; dumped to the 'slowlog' file. A value of '0s' means 'off'.
      ; Available units: s(econds)(default), m(inutes), h(ours), or d(ays)
      ; Default Value: 0
      ;request_slowlog_timeout = 0

      ; Depth of slow log stack trace.
      ; Default Value: 20
      ;request_slowlog_trace_depth = 20

      ; The timeout for serving a single request after which the worker process will
      ; be killed. This option should be used when the 'max_execution_time' ini option
      ; does not stop script execution for some reason. A value of '0' means 'off'.
      ; Available units: s(econds)(default), m(inutes), h(ours), or d(ays)
      ; Default Value: 0
      ;request_terminate_timeout = 0

      ; Set open file descriptor rlimit.
      ; Default Value: system defined value
      ;rlimit_files = 1024

      ; Set max core size rlimit.
      ; Possible Values: 'unlimited' or an integer greater or equal to 0
      ; Default Value: system defined value
      ;rlimit_core = 0

      ; Chroot to this directory at the start. This value must be defined as an
      ; absolute path. When this value is not set, chroot is not used.
      ; Note: you can prefix with '$prefix' to chroot to the pool prefix or one
      ; of its subdirectories. If the pool prefix is not set, the global prefix
      ; will be used instead.
      ; Note: chrooting is a great security feature and should be used whenever
      ;       possible. However, all PHP paths will be relative to the chroot
      ;       (error_log, sessions.save_path, ...).
      ; Default Value: not set
      ;chroot =

      ; Chdir to this directory at the start.
      ; Note: relative path can be used.
      ; Default Value: current directory or / when chroot
      ;chdir = /var/www

      ; Redirect worker stdout and stderr into main error log. If not set, stdout and
      ; stderr will be redirected to /dev/null according to FastCGI specs.
      ; Note: on highloaded environement, this can cause some delay in the page
      ; process time (several ms).
      ; Default Value: no
      ;catch_workers_output = yes

      ; Clear environment in FPM workers
      ; Prevents arbitrary environment variables from reaching FPM worker processes
      ; by clearing the environment in workers before env vars specified in this
      ; pool configuration are added.
      ; Setting to "no" will make all environment variables available to PHP code
      ; via getenv(), $_ENV and $_SERVER.
      ; Default Value: yes
      ;clear_env = no

      ; Limits the extensions of the main script FPM will allow to parse. This can
      ; prevent configuration mistakes on the web server side. You should only limit
      ; FPM to .php extensions to prevent malicious users to use other extensions to
      ; execute php code.
      ; Note: set an empty value to allow all extensions.
      ; Default Value: .php
      ;security.limit_extensions = .php .php3 .php4 .php5 .php7

      ; Pass environment variables like LD_LIBRARY_PATH. All $VARIABLEs are taken from
      ; the current environment.
      ; Default Value: clean env
      ;env[HOSTNAME] = $HOSTNAME
      ;env[PATH] = /usr/local/bin:/usr/bin:/bin
      ;env[TMP] = /tmp
      ;env[TMPDIR] = /tmp
      ;env[TEMP] = /tmp

      ; Additional php.ini defines, specific to this pool of workers. These settings
      ; overwrite the values previously defined in the php.ini. The directives are the
      ; same as the PHP SAPI:
      ;   php_value/php_flag             - you can set classic ini defines which can
      ;                                    be overwritten from PHP call 'ini_set'.
      ;   php_admin_value/php_admin_flag - these directives won't be overwritten by
      ;                                     PHP call 'ini_set'
      ; For php_*flag, valid values are on, off, 1, 0, true, false, yes or no.

      ; Defining 'extension' will load the corresponding shared extension from
      ; extension_dir. Defining 'disable_functions' or 'disable_classes' will not
      ; overwrite previously defined php.ini values, but will append the new value
      ; instead.

      ; Note: path INI options can be relative and will be expanded with the prefix
      ; (pool, global or /usr/local)

      ; Default Value: nothing is defined by default except the values in php.ini and
      ;                specified at startup with the -d argument
      ;php_admin_value[sendmail_path] = /usr/sbin/sendmail -t -i -f www@my.domain.com
      ;php_flag[display_errors] = off
      ;php_admin_value[error_log] = /var/log/fpm-php.www.log
      ;php_admin_flag[log_errors] = on
      ;php_admin_value[memory_limit] = 32M
  kind: ConfigMap
  metadata:
    name: "${NAME}-php"
- apiVersion: v1
  data:
    default.conf: |
                    include /etc/nginx/conection_params;
                    include /etc/nginx/cache_params;
                    include /etc/nginx/gzip_params;
                    include /etc/nginx/rewrite_server;
                    #include naxsi/naxsi_core.rules;


                    # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
                    # scheme used to connect to this server
                    #map $http_x_forwarded_proto $proxy_x_forwarded_proto {
                    #  default $http_x_forwarded_proto;
                    #  ''      $scheme;
                    #}

                    # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
                    # Connection header that may have been passed to this server
                    #map $http_upgrade $proxy_connection {
                    #  default upgrade;
                    #  '' close;
                    #}


                    server {
                        listen 8080 default_server;
                        server_name _;

                        access_log off;

                        include server_cache_params;

                        # this prevents hidden files (beginning with a period) from being served
                        location ~ /\.          { access_log off; log_not_found off; deny all; }

                            root {{HOME}};
                            index index.html index.htm index.php;

                            location / {
                                try_files $uri $uri/ /index.php$is_args$args;
                            }


                            location ~* .(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
                                    expires max;
                                    log_not_found off;
                                    access_log off;
                                    aio threads=default;
                            }
                            location = /robots.txt {
                                    access_log off;
                                    log_not_found off;
                            }
                            location = /favicon.ico {
                              expires max;
                              log_not_found off;
                              access_log off;
                            }


                            location ~ \.(hh|php)$ {
                                try_files $uri =404;

                                ## Naxsi rules
                                #include fastcgi_naxsi_params

                                #Bypass cache
                                {{NGINX_CACHE}}


                                include fastcgi_cache_params;

                                fastcgi_pass_header 'Accept-Encoding ""';

                                fastcgi_pass 127.0.0.1:9000;
                                #fastcgi_pass  unix:/var/run/php-fpm.sock;
                                fastcgi_index index.php;
                                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                                fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                                fastcgi_param HTTPS $fe_https;

                                include fastcgi_params;

                            }

                    }

                    # server {
                    #     listen       8080 default_server;
                    #     server_name  _;
                    #     return       301 http://{{DOMAIN_PROD}};
                    # }
  kind: ConfigMap
  metadata:
    name: ${NAME}-nginx
- apiVersion: v1
  kind: Secret
  metadata:
    name: "${NAME}"
  stringData:
    wordpress-secret-token: "${WP_SECRET_TOKEN}"
    wordpress-security-salt: "${WP_SECURITY_SALT}"
    database-password: "${DATABASE_PASSWORD}"
    database-user: "${DATABASE_USER}"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
        "kind": "Service"}]'
    name: "${NAME}"
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: "${NAME}"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
        "kind": "Service"}]'
    name: "${NAME}-dev"
  spec:
    ports:
    - name: web
      port: 8081
      targetPort: 8081
    selector:
      name: "${NAME}"      
- apiVersion: v1
  kind: Route
  metadata:
    name: "${NAME}"
  spec:
    host: "${APPLICATION_DOMAIN}"
    to:
      kind: Service
      name: "${NAME}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: "${NAME}"
  spec:
    replicas: 1
    selector:
      name: "${NAME}"
    strategy:
      recreateParams:
        pre:
          execNewPod:
            command:
            - "/usr/libexec/s2i/bin/migrate-database.sh"
            containerName: php
          failurePolicy: Retry
      type: Recreate
    template:
      metadata:
        labels:
          name: "${NAME}"
        name: "${NAME}"
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_NAME
            value: "${DATABASE_SERVICE_NAME}"
          - name: DATABASE_ENGINE
            value: "${DATABASE_ENGINE}"
          - name: DATABASE_NAME
            value: "${DATABASE_NAME}"
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: "${NAME}"
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: "${NAME}"
          - name: WP_SECRET_TOKEN
            valueFrom:
              secretKeyRef:
                key: wordpress-secret-token
                name: "${NAME}"
          - name: WP_SECURITY_SALT
            valueFrom:
              secretKeyRef:
                key: wordpress-security-salt
                name: "${NAME}"
          - name: OPCACHE_REVALIDATE_FREQ
            value: "${OPCACHE_REVALIDATE_FREQ}"
          image: "php"
          name: php
          volumeMounts:
          - mountPath: "/opt/app-root/etc/php-fpm.d"
            name: "php-config"
          - mountPath: "/opt/app-root/src"
            name: "${NAME}-data"                    
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
        - env:
          - name: DOMAIN_PROD
            value: "${APPLICATION_DOMAIN}"
          image: "docker.io/oondeo/nginx"  
          name: "nginx"      
          livenessProbe:
            httpGet:
              path: "/health.php"
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 3
          ports:
          - containerPort: 8080
          - containerPort: 8081
          readinessProbe:
            httpGet:
              path: "/health.php"
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 60
            timeoutSeconds: 3
          volumeMounts:
          - mountPath: "/opt/app-root/etc/conf.d"
            name: "nginx-config"          
          - mountPath: "/opt/app-root/src"
            name: "${NAME}-data"
        volumes:
        - name: "php-config"
          configMap:
            name: "${NAME}-php"
        - name: "nginx-config"
          configMap:
            name: "${NAME}-nginx"                     
        - name: "${NAME}-data"
          persistentVolumeClaim:
            claimName: "${NAME}"
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - php
        from:
          kind: ImageStreamTag
          name: "php:7.2"
          namespace: "${NAMESPACE}"
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    storageClassName: local-storage
    resources:
      requests:
        storage: "${DB_VOLUME_CAPACITY}"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    storageClassName: local-storage
    resources:
      requests:
        storage: "${VOLUME_CAPACITY}"        
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    ports:
    - name: mysql
      port: 3306
      targetPort: 3306
    selector:
      name: "${DATABASE_SERVICE_NAME}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: "${DATABASE_SERVICE_NAME}"
        name: "${DATABASE_SERVICE_NAME}"
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: "${NAME}"
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: "${NAME}"
          - name: MYSQL_DATABASE
            value: "${DATABASE_NAME}"
          image: " "
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mysql
          ports:
          - containerPort: 3306
          readinessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER}
                -D ${DATABASE_NAME} -e 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: "${MEMORY_MYSQL_LIMIT}"
          volumeMounts:
          - mountPath: "/var/lib/mysql/data"
            name: "${DATABASE_SERVICE_NAME}-data"
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          persistentVolumeClaim:
            claimName: "${DATABASE_SERVICE_NAME}"
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mariadb:10.2
          namespace: "${NAMESPACE}"
      type: ImageChange
    - type: ConfigChange
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: wordpress-mysql-persistent
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
- description: Version of PHP image to be used (7.1 or latest).
  displayName: PHP Version
  name: PHP_VERSION
  required: true
  value: '7.2'
- description: Maximum amount of memory the WordPress container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Maximum amount of memory the MySQL container can use.
  displayName: Memory Limit (MySQL)
  name: MEMORY_MYSQL_LIMIT
  required: true
  value: 512Mi
- description: Volume space available for data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 2Gi
- description: Volume space available for db, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: DB_VOLUME_CAPACITY
  required: true
  value: 1Gi  
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/sclorg/wordpress-ex.git
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: The exposed hostname that will route to the WordPress service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
  value: ''
- description: Github trigger secret.  A difficult to guess string encoded as part
    of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: "[a-zA-Z0-9]{40}"
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mysql
- description: 'Database engine: postgresql, mysql or sqlite (default).'
  displayName: Database Engine
  name: DATABASE_ENGINE
  required: true
  value: mysql
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: default
- displayName: Database User
  name: DATABASE_USER
  required: true
  value: wordpress
- displayName: Database Password
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  name: DATABASE_PASSWORD
- description: Set this to a long random string.
  displayName: WordPress secret token
  from: "[\\w]{50}"
  generate: expression
  name: WP_SECRET_TOKEN
- description: Security salt for session hash.
  displayName: WordPress Security Salt
  from: "[a-zA-Z0-9]{40}"
  generate: expression
  name: WP_SECURITY_SALT
- description: How often to check script timestamps for updates, in seconds. 0 will
    result in OPcache checking for updates on every request.
  displayName: OPcache Revalidation Frequency
  name: OPCACHE_REVALIDATE_FREQ
  value: '2'
- description: The custom Composer mirror URL
  displayName: Custom Composer Mirror URL
  name: COMPOSER_MIRROR
  value: ''
