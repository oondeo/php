---
apiVersion: v1
kind: Template
labels:
  app: php-mysql-persistent
  template: php-mysql-persistent
message: |-
  The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/php-ex/blob/master/README.md.
metadata:
  annotations:
    description: An example PHP application with a MySQL database. For more information
      about using this template, including OpenShift considerations, see https://github.com/sclorg/php-ex/blob/master/README.md.
    iconClass: icon-php
    openshift.io/display-name: PHP + MySQL
    openshift.io/documentation-url: https://github.com/oondeo/docker-php
    openshift.io/long-description: This template defines resources needed to develop
      a PHP application, including a build configuration, application deployment
      configuration, and database deployment configuration.
    openshift.io/provider-display-name: Oondeo, C.B.
    openshift.io/support-url: https://oondeo.es
    tags: quickstart,php
    template.openshift.io/bindable: 'false'
  name: php-mysql-persistent
  namespace: openshift
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: "${NAME}-crontab"
  data:
    ${NAME}: "* * * * * default curl 'http://127.0.0.1:8080'"
- apiVersion: v1
  data:
    adminer.conf: |
      [adminer-dev]
      listen = /opt/app-root/var/run/adminer.sock

      listen.mode = 0660
      ;access.log = /proc/self/fd/2
      ;access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"

      pm = dynamic
      pm.max_children = 5
      pm.start_servers = 2
      pm.min_spare_servers = 1
      pm.max_spare_servers = 3
      ;pm.process_idle_timeout = 10s;
      ;pm.max_requests = 500
      php_admin_value[open_basedir] = "/opt/app-root/src:/opt/app-root/var/lib:/usr/share/php:/usr/local/lib:/usr/lib/php7:/usr/lib/php:/tmp:/var/tmp:/run/php:/var/run/php"
      php_admin_value[session.save_path] = "/tmp/sessions"
      php_admin_value[soap.wsdl_cache_dir] = "/tmp"
      php_admin_value[sys_temp_dir] = "/tmp"
      php_admin_value[upload_tmp_dir] = "/var/tmp"
      php_admin_value[memory_limit]="192M"
      php_admin_value[expose_php]= "0"
      php_admin_value[variables_order]="EGPCS"      
      php_value[display_errors] = "0"
      php_value[upload_max_filesize] = "128M"
      php_value[post_max_size] = "128M"
      php_value[max_execution_time] = "120"
      php_value[max_input_time] = "120"
      php_value[max_input_vars] = "5000"
      php_value[opcache.enable] = "1"
      php_value[opcache.revalidate_freq] = "200"
      env[TMP] = "/tmp"
      env[TMPDIR] = "/tmp"
      env[TEMP] = "/tmp"  
    ${APPLICATION_DOMAIN}-dev.conf: |
      [${APPLICATION_DOMAIN}-dev]
      listen = /opt/app-root/var/run/${APPLICATION_DOMAIN}-dev.sock

      listen.mode = 0660
      ;access.log = /proc/self/fd/2
      ;access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"

      pm = dynamic
      pm.max_children = 5
      pm.start_servers = 2
      pm.min_spare_servers = 1
      pm.max_spare_servers = 3
      ;pm.process_idle_timeout = 10s;
      ;pm.max_requests = 500
      php_admin_value[open_basedir] = "/opt/app-root/src/${APPLICATION_DOMAIN}:/opt/app-root/var/lib:/usr/share/php:/usr/local/lib:/usr/lib/php7:/usr/lib/php:/tmp/${APPLICATION_DOMAIN}:/var/tmp/${APPLICATION_DOMAIN}:/run/php:/var/run/php"
      php_admin_value[session.save_path] = "/tmp/${APPLICATION_DOMAIN}"
      php_admin_value[soap.wsdl_cache_dir] = "/tmp/${APPLICATION_DOMAIN}"
      php_admin_value[sys_temp_dir] = "/tmp/${APPLICATION_DOMAIN}"
      php_admin_value[upload_tmp_dir] = "/var/tmp/${APPLICATION_DOMAIN}"
      php_admin_value[memory_limit]="192M"
      php_admin_value[expose_php]= "0"
      php_admin_value[variables_order]="EGPCS"      
      php_value[display_errors] = "0"
      php_value[upload_max_filesize] = "32M"
      php_value[post_max_size] = "32M"
      php_value[max_execution_time] = "60"
      php_value[max_input_time] = "60"
      php_value[max_input_vars] = "5000"
      php_value[opcache.enable] = "1"
      php_value[opcache.revalidate_freq] = "20"
      env[TMP] = "/tmp/${APPLICATION_DOMAIN}"
      env[TMPDIR] = "/tmp/${APPLICATION_DOMAIN}"
      env[TEMP] = "/tmp/${APPLICATION_DOMAIN}"
    ${APPLICATION_DOMAIN}.conf: |
      ; Start a new pool named 'www'.
      ; the variable $pool can be used in any directive and will be replaced by the
      ; pool name ('www' here)
      [${APPLICATION_DOMAIN}]
      listen = /opt/app-root/var/run/${APPLICATION_DOMAIN}.sock

      listen.mode = 0660
      ;access.log = /proc/self/fd/2
      ;access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"

      pm = dynamic
      pm.max_children = 8
      pm.start_servers = 4
      pm.min_spare_servers = 2
      pm.max_spare_servers = 5
      ;pm.process_idle_timeout = 10s;
      pm.max_requests = 25000
      php_admin_value[open_basedir] = "/opt/app-root/src/${APPLICATION_DOMAIN}:/opt/app-root/var/lib:/usr/share/php:/usr/local/lib:/usr/lib/php7:/usr/lib/php:/tmp/${APPLICATION_DOMAIN}:/var/tmp/${APPLICATION_DOMAIN}:/run/php:/var/run/php"
      php_admin_value[session.save_path] = "/tmp/${APPLICATION_DOMAIN}"
      php_admin_value[soap.wsdl_cache_dir] = "/tmp/${APPLICATION_DOMAIN}"
      php_admin_value[sys_temp_dir] = "/tmp/${APPLICATION_DOMAIN}"
      php_admin_value[upload_tmp_dir] = "/var/tmp/${APPLICATION_DOMAIN}"
      php_admin_value[memory_limit]="192M"
      php_admin_value[expose_php]= "0"
      php_admin_value[variables_order]="EGPCS"      
      php_value[display_errors] = "0"
      php_value[upload_max_filesize] = "32M"
      php_value[post_max_size] = "32M"
      php_value[max_execution_time] = "60"
      php_value[max_input_time] = "60"
      php_value[max_input_vars] = "5000"
      php_value[opcache.enable] = "1"
      php_value[opcache.revalidate_freq] = "20"
      env[TMP] = "/tmp/${APPLICATION_DOMAIN}"
      env[TMPDIR] = "/tmp/${APPLICATION_DOMAIN}"
      env[TEMP] = "/tmp/${APPLICATION_DOMAIN}"
  kind: ConfigMap
  metadata:
    name: "${NAME}-php"
- apiVersion: v1
  data:
    ${APPLICATION_DOMAIN}.conf: |
                    #include /etc/nginx/conection_params;
                    include /etc/nginx/cache_params;
                    include /etc/nginx/gzip_params;
                    #include naxsi/naxsi_core.rules;

                    # Only on server block
                    #client_header_buffer_size    1k;
                    # Only on server block
                    #large_client_header_buffers  4 8k;

                    # If the client stops reading data, free up the stale client connection after this much time. Default 60.
                    #send_timeout 6;
                    # Only on server block
                    #client_header_timeout  3m;

                    # Location order
                    # = (exactly) : location = /path
                    # ^~ (forward match) : location ^~ /path
                    # ~ (regular expression case sensitive) : location ~ /path/
                    # ~* (regular expression case insensitive) : location ~* .(jpg|png|bmp)
                    # / : location /path


                    # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
                    # Connection header that may have been passed to this server
                    map $http_upgrade $proxy_connection {
                      default upgrade;
                      '' close;
                    }

                    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;
                    server {
                        listen 8080 default_server;
                        server_name _;

                        access_log off;

                        include error_page_params;
                        include server_cache_params;

                        root /opt/app-root/src/${APPLICATION_DOMAIN}/public_html;
                        index index.html index.htm index.php;

                        # this prevents hidden files (beginning with a period) from being served
                        location ~ /\.          { access_log off; log_not_found off; deny all; }

                        location / {
                            #try_files /index.html /index.htm $uri $uri/ /index.php$is_args$args;
                            try_files /index.html /index.htm $uri $uri/ @index_php;
                        }

                        location ~* .(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
                                expires max;
                                log_not_found off;
                                access_log off;
                                aio threads=default;
                        }
                        location = /robots.txt {
                                access_log off;
                                log_not_found off;
                        }
                        location = /favicon.ico {
                          expires max;
                          log_not_found off;
                          access_log off;
                        }

                        location ~* /wp-content/uploads/\.(hh|php)$ {
                            return 404;
                        }

                        location /wp-admin/admin-ajax.php {
                            limit_req zone=one burst=4 nodelay;
                        }
                        location = /xmlrpc.php { return 404; }
                        location /wp-admin {
                            limit_req zone=one burst=4 nodelay;
                        }
                        location /wp-login.php {
                            limit_req zone=one burst=4 nodelay;                        
                        }
                        location @index.php {
                            try_files $uri =404;

                            ## Naxsi rules
                            #include fastcgi_naxsi_params

                            #Bypass cache
                            #{{NGINX_CACHE}}


                            include fastcgi_cache_params;

                            fastcgi_pass_header 'Accept-Encoding ""';

                            #fastcgi_pass 127.0.0.1:9000;
                            fastcgi_pass  unix:/opt/app-root/var/run/${APPLICATION_DOMAIN}.sock;
                            fastcgi_index index.php;
                            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                            fastcgi_param HTTPS $fe_https;

                            include fastcgi_params;

                        }                                             
                        location ~ \.(hh|php)$ {
                            try_files $uri =404;

                            ## Naxsi rules
                            #include fastcgi_naxsi_params

                            #Bypass cache
                            #{{NGINX_CACHE}}


                            include fastcgi_cache_params;

                            fastcgi_pass_header 'Accept-Encoding ""';

                            #fastcgi_pass 127.0.0.1:9000;
                            fastcgi_pass  unix:/opt/app-root/var/run/${APPLICATION_DOMAIN}.sock;
                            fastcgi_index index.php;
                            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                            fastcgi_param HTTPS $fe_https;

                            include fastcgi_params;

                            # Fascgi conection paramas
                            #X-Accel-Buffering
                            fastcgi_buffer_size 64k;
                            fastcgi_buffers 8 16k;
                            fastcgi_busy_buffers_size 64k;
                            fastcgi_read_timeout 600;
                            fastcgi_send_timeout 600;
                            fastcgi_connect_timeout 600;

                            # send the client a "request timed out" if the body is not loaded by this time. Default 60.
                            client_body_timeout 10m;
                            client_max_body_size 64M;
                            client_body_buffer_size     4M;  
                            send_timeout 600;                          

                        }

                    }
    ${APPLICATION_DOMAIN}-dev.conf: |
                    server {
                        listen 8081 default_server;
                        server_name _;

                        access_log off;

                        include error_page_params;
                        include server_cache_params;

                        root /opt/app-root/src/${APPLICATION_DOMAIN}-dev/public_html;
                        index index.html index.htm index.php;

                        # this prevents hidden files (beginning with a period) from being served
                        location ~ /\.          { access_log off; log_not_found off; deny all; }

                        location / {
                            #try_files /index.html /index.htm $uri $uri/ /index.php$is_args$args;
                            try_files /index.html /index.htm $uri $uri/ @index_php;
                        }

                        location ~* .(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
                                expires max;
                                log_not_found off;
                                access_log off;
                                aio threads=default;
                        }
                        location = /robots.txt {
                                access_log off;
                                log_not_found off;
                        }
                        location = /favicon.ico {
                          expires max;
                          log_not_found off;
                          access_log off;
                        }

                        location ~* /wp-content/uploads/\.(hh|php)$ {
                            return 404;
                        }

                        location /wp-admin/admin-ajax.php {
                            limit_req zone=one burst=4 nodelay;
                        }
                        location = /xmlrpc.php { return 404; }
                        location /wp-admin {
                            limit_req zone=one burst=4 nodelay;
                        }
                        location /wp-login.php {
                            limit_req zone=one burst=4 nodelay;                        
                        }
                        location @index.php {
                            try_files $uri =404;

                            ## Naxsi rules
                            #include fastcgi_naxsi_params

                            #Bypass cache
                            #{{NGINX_CACHE}}


                            include fastcgi_cache_params;

                            fastcgi_pass_header 'Accept-Encoding ""';

                            #fastcgi_pass 127.0.0.1:9000;
                            fastcgi_pass  unix:/opt/app-root/var/run/${APPLICATION_DOMAIN}-dev.sock;
                            fastcgi_index index.php;
                            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                            fastcgi_param HTTPS $fe_https;

                            include fastcgi_params;

                        }                                             
                        location ~ \.(hh|php)$ {
                            try_files $uri =404;

                            ## Naxsi rules
                            #include fastcgi_naxsi_params

                            #Bypass cache
                            #{{NGINX_CACHE}}


                            include fastcgi_cache_params;

                            fastcgi_pass_header 'Accept-Encoding ""';

                            #fastcgi_pass 127.0.0.1:9000;
                            fastcgi_pass  unix:/opt/app-root/var/run/${APPLICATION_DOMAIN}-dev.sock;
                            fastcgi_index index.php;
                            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                            fastcgi_param HTTPS $fe_https;

                            include fastcgi_params;

                            # Fascgi conection paramas
                            #X-Accel-Buffering
                            fastcgi_buffer_size 64k;
                            fastcgi_buffers 8 16k;
                            fastcgi_busy_buffers_size 64k;
                            fastcgi_read_timeout 600;
                            fastcgi_send_timeout 600;
                            fastcgi_connect_timeout 600;

                            # send the client a "request timed out" if the body is not loaded by this time. Default 60.
                            client_body_timeout 10m;
                            client_max_body_size 64M;
                            client_body_buffer_size     4M;  
                            send_timeout 600;                          

                        }

                    }
  kind: ConfigMap
  metadata:
    name: ${NAME}-nginx
- apiVersion: v1
  data:
    ${APPLICATION_DOMAIN}-dev.conf: |
                    #include /etc/nginx/conection_params;
                    include /etc/nginx/cache_params;
                    include /etc/nginx/gzip_params;
                    #include naxsi/naxsi_core.rules;

                    # Only on server block
                    #client_header_buffer_size    1k;
                    # Only on server block
                    #large_client_header_buffers  4 8k;

                    # If the client stops reading data, free up the stale client connection after this much time. Default 60.
                    #send_timeout 6;
                    # Only on server block
                    #client_header_timeout  3m;

                    # Location order
                    # = (exactly) : location = /path
                    # ^~ (forward match) : location ^~ /path
                    # ~ (regular expression case sensitive) : location ~ /path/
                    # ~* (regular expression case insensitive) : location ~* .(jpg|png|bmp)
                    # / : location /path


                    # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
                    # Connection header that may have been passed to this server
                    map $http_upgrade $proxy_connection {
                      default upgrade;
                      '' close;
                    }

                    server {

                      listen 1080;
                      server_name _;  
                      location / {
                        set $rewrite_port "8081";
                        set $rewrite_host "127.0.0.1";
                        set $domain_prod "${APPLICATION_DOMAIN}";                                       
                        include /etc/nginx/rewrite_server;
                      }
                      location = /adminer.php {
                            try_files $uri =404;

                            ## Naxsi rules
                            #include fastcgi_naxsi_params

                            #Bypass cache
                            #{{NGINX_CACHE}}


                            include fastcgi_cache_params;

                            fastcgi_pass_header 'Accept-Encoding ""';

                            #fastcgi_pass 127.0.0.1:9000;
                            fastcgi_pass  unix:/opt/app-root/var/run/adminer.sock;
                            fastcgi_index index.php;
                            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                            fastcgi_param HTTPS $fe_https;

                            include fastcgi_params;

                            # Fascgi conection paramas
                            #X-Accel-Buffering
                            fastcgi_buffer_size 64k;
                            fastcgi_buffers 8 16k;
                            fastcgi_busy_buffers_size 64k;
                            fastcgi_read_timeout 600;
                            fastcgi_send_timeout 600;
                            fastcgi_connect_timeout 600;

                            # send the client a "request timed out" if the body is not loaded by this time. Default 60.
                            client_body_timeout 10m;
                            client_max_body_size 64M;
                            client_body_buffer_size     4M;  
                            send_timeout 600;                                                       
                      }
  kind: ConfigMap
  metadata:
    name: ${NAME}-nginx-dev
- apiVersion: v1
  kind: Secret
  metadata:
    name: "${NAME}"
  stringData:
    database-password: "${DATABASE_PASSWORD}"
    database-user: "${DATABASE_USER}"
    ftp-users: "${FTP_USER}:${FTP_PASSWORD}:/opt/app-root/src"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
        "kind": "Service"}]'
    name: "${NAME}"
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: "${NAME}"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
        "kind": "Service"}]'
    name: "${NAME}-dev"
  spec:
    ports:
    - name: web
      port: 1080
      targetPort: 1080
    selector:
      name: "${NAME}"   
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "NAME", "kind": "Service"}]'
    name: ${NAME}-ftp
  spec:
    ports:
    - name: ftp-data
      port: 20
      protocol: TCP
      targetPort: 10020
    - name: ftp
      port: 21
      protocol: TCP
      targetPort: 10021
    - name: passive0
      port: 60000
      protocol: TCP
      targetPort: 60000
    - name: passive1
      port: 60001
      protocol: TCP
      targetPort: 60001
    - name: passive2
      port: 60002
      protocol: TCP
      targetPort: 60002
    - name: passive3
      port: 60003
      protocol: TCP
      targetPort: 60003
    - name: passive4
      port: 60004
      protocol: TCP
      targetPort: 60004
    - name: passive5
      port: 60005
      protocol: TCP
      targetPort: 60005
    - name: passive6
      port: 60006
      protocol: TCP
      targetPort: 60006
    - name: passive7
      port: 60007
      protocol: TCP
      targetPort: 60007
    - name: passive8
      port: 60008
      protocol: TCP
      targetPort: 60008
    - name: passive9
      port: 60009
      protocol: TCP
      targetPort: 60009
    - name: passive10
      port: 60010
      protocol: TCP
      targetPort: 60010
    selector:
      name: ${NAME}
    type: ClusterIP         
- apiVersion: v1
  kind: Route
  metadata:
    name: "${NAME}"
  spec:
    host: "${APPLICATION_DOMAIN}"
    to:
      kind: Service
      name: "${NAME}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: "${NAME}"
  spec:
    replicas: 1
    selector:
      name: "${NAME}"
    strategy:
      # recreateParams:
      #   pre:
      #     execNewPod:
      #       command:
      #       - "/usr/libexec/s2i/bin/migrate-database.sh"
      #       containerName: php
      #     failurePolicy: Retry
      # type: Recreate
      type: Rolling
    template:
      metadata:
        labels:
          name: "${NAME}"
        name: "${NAME}"
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_NAME
            value: "${DATABASE_SERVICE_NAME}"
          - name: DATABASE_ENGINE
            value: "${DATABASE_ENGINE}"
          - name: DATABASE_NAME
            value: "${DATABASE_NAME}"
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: "${NAME}"
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: "${NAME}"
          image: "php"
          name: php         
          volumeMounts:
          - mountPath: "/tmp"
            name: "tmp"           
          - mountPath: "/opt/app-root/var/run"
            name: "run"
          - mountPath: "/opt/app-root/etc/php-fpm.d"
            name: "php-config"
          - mountPath: "/opt/app-root/src"
            name: "${NAME}-data"                    
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
        - env:
          - name: DOMAIN_PROD
            value: "${APPLICATION_DOMAIN}"
          image: "docker.io/oondeo/nginx"  
          name: "nginx"      
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 8080
            timeoutSeconds: 4
          ports:
          - containerPort: 8080
          - containerPort: 8081
          volumeMounts:
          - mountPath: "/opt/app-root/etc/conf.d"
            name: "nginx-config"          
          - mountPath: "/opt/app-root/src"
            name: "${NAME}-data"
          - mountPath: "/opt/app-root/var/run"
            name: "run" 
          - mountPath: "/tmp"
            name: "tmp" 
        - image: "docker.io/oondeo/crond"
          imagePullPolicy: IfNotPresent 
          name: "crond"      
          volumeMounts:
          - mountPath: "/opt/app-root/etc"
            name: "crontab"          
          - mountPath: "/opt/app-root/src"
            name: "${NAME}-data"
          - mountPath: "/tmp"
            name: "tmp"            
        - env:
          - name: DOMAIN_PROD
            value: "${APPLICATION_DOMAIN}"
          image: "docker.io/oondeo/nginx"
          imagePullPolicy: IfNotPresent 
          name: "nginx-dev"      
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 1080
            timeoutSeconds: 10
          ports:
          - containerPort: 1080        
          volumeMounts:
          - mountPath: "/opt/app-root/etc/conf.d"
            name: "nginx-dev-config"          
          - mountPath: "/opt/app-root/src"
            name: "${NAME}-data"
          - mountPath: "/opt/app-root/var/run"
            name: "run" 
          - mountPath: "/tmp"
            name: "tmp"
        - env:
          - name: ADDRESS
            value: "${APPLICATION_DOMAIN}"
          - name: FTPD_PORT
            value: "10020"
          - name: FTP_PORT
            value: "10021"
          - name: SSH_PORT
            value: "10022"            
          - name: PASSIVE_PORTS
            value: "60000:60010"                     
          image: "docker.io/oondeo/ftpd"
          args: [ 'run','ftpd' ]
          imagePullPolicy: IfNotPresent 
          name: "ftpd"      
          ports:
          - containerPort: 10020
          - containerPort: 10021
          volumeMounts:       
          - mountPath: "/opt/app-root/src"
            name: "${NAME}-data"
          - mountPath: "/tmp"
            name: "tmp"       
          - mountPath: "/opt/app-root/etc"
            name: ftp-users
            readOnly: true                               
        volumes:
        - name: "run"
          emptyDir: {}
        - name: "tmp"
          emptyDir:
            medium: Memory
        - name: "php-config"
          configMap:
            name: "${NAME}-php"
        - name: "crontab"
          configMap:
            name: "${NAME}-crontab"               
        - name: "nginx-config"
          configMap:
            name: "${NAME}-nginx"
        - name: "nginx-dev-config"
          configMap:
            name: "${NAME}-nginx-dev"
        - name: "ftp-users"
          secret:
            secretName: "${NAME}"
            items:
            - key: ftp-users                                            
              path: "user_list"
        - name: "${NAME}-data"
          persistentVolumeClaim:
            claimName: "${NAME}"
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - php
        from:
          kind: ImageStreamTag
          name: "php:7.2-fpm"
          namespace: "${NAMESPACE}"
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    storageClassName: local-storage
    selector:
      matchLabels:
        name: "${NAME}-db"    
    resources:
      requests:
        storage: "${DB_VOLUME_CAPACITY}"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    storageClassName: local-storage
    selector:
      matchLabels:
        name: "${NAME}"        
    resources:
      requests:
        storage: "${VOLUME_CAPACITY}"        
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    ports:
    - name: mysql
      port: 3306
      targetPort: 3306
    selector:
      name: "${DATABASE_SERVICE_NAME}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: "${DATABASE_SERVICE_NAME}"
        name: "${DATABASE_SERVICE_NAME}"
      spec:
        containers:
        - env:
          - name: MYSQLD__QUERY_CACHE_TYPE
            value: 'ON'          
          - name: MYSQLD__QUERY_CACHE_SIZE
            value: "50MB"
          - name: MYSQLD__JOIN_BUFFER_SIZE
            value: "1MB"
          - name: MYSQLD__SORT_BUFFER_SIZE
            value: "2MB"            
          - name: MYSQLD__TMP_TABLE_SIZE
            value: "50MB"
          - name: MYSQLD__MAX_HEAP_TABLE_SIZE
            value: "50MB"
          - name: MYSQLD__INNODB_DOUBLEWRITE
            value: "0"
          - name: MYSQLD__INNODB_LOG_FILE_SIZE
            value: "128M"
          - name: MYSQLD__INNODB_BUFFER_POOL_SIZE
            value: "1024M"
          - name: MYSQLD__INNODB_BUFFER_POOL_INSTANCES
            value: "2"          
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: "${NAME}"
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: "${NAME}"
          - name: MYSQL_DATABASE
            value: "${DATABASE_NAME}"
          image: " "
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mysql
          ports:
          - containerPort: 3306
          readinessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - MYSQL_PWD="${MYSQL_PASSWORD}" mysql -h 127.0.0.1 -u ${MYSQL_USER} -D ${MYSQL_DATABASE} -e 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: "${MEMORY_MYSQL_LIMIT}"
          volumeMounts:
          - mountPath: "/opt/app-root/mysql"
            name: "${DATABASE_SERVICE_NAME}-data"
          - mountPath: "/tmp"
            name: "tmp"  
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          persistentVolumeClaim:
            claimName: "${DATABASE_SERVICE_NAME}"
        - name: "tmp"
          emptyDir:
            medium: Memory          
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mariadb:10.3
          namespace: "${NAMESPACE}"
      type: ImageChange
    - type: ConfigChange
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: php-mysql-persistent
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
- description: Version of PHP image to be used (7.1 or latest).
  displayName: PHP Version
  name: PHP_VERSION
  required: true
  value: '7.2'
- description: Maximum amount of memory the PHP container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Maximum amount of memory the MySQL container can use.
  displayName: Memory Limit (MySQL)
  name: MEMORY_MYSQL_LIMIT
  required: true
  value: 512Mi
- description: Volume space available for data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 2Gi
- description: Volume space available for db, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: DB_VOLUME_CAPACITY
  required: true
  value: 1Gi  
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/sclorg/php-ex.git
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: The exposed hostname that will route to the PHP service.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
  required: true
- description: Github trigger secret.  A difficult to guess string encoded as part
    of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: "[a-zA-Z0-9]{40}"
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mysql
- description: 'Database engine: postgresql, mysql or sqlite (default).'
  displayName: Database Engine
  name: DATABASE_ENGINE
  required: true
  value: mysql
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: default
- displayName: Database User
  name: DATABASE_USER
  required: true
  value: php
- displayName: Database Password
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  name: DATABASE_PASSWORD
- description: The custom Composer mirror URL
  displayName: Custom Composer Mirror URL
  name: COMPOSER_MIRROR
  value: ''
- displayName: FTP User
  name: FTP_USER
  required: true
  value: admin
- displayName: FTP Password
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  name: FTP_PASSWORD  