---
# AÃ±adir la direccion ip al servicio externalIPs: [1.1.1.1]
# replace ftp by https://extplorer.net/
apiVersion: v1
kind: Template
labels:
  app: php-webpanel
  template: php-webpanel
message: |-
  The following service(s) have been created in your project: ${NAME},
  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/php-ex/blob/master/README.md.
metadata:
  annotations:
    description: An example PHP application . For more information
      about using this template, including OpenShift considerations, see https://github.com/sclorg/php-ex/blob/master/README.md.
    iconClass: icon-php
    openshift.io/display-name: PHP WEBPANEL
    openshift.io/documentation-url: https://github.com/oondeo/docker-php
    openshift.io/long-description: This template defines resources needed to develop
      a PHP application, including a build configuration, application deployment
      configuration, and database deployment configuration.
    openshift.io/provider-display-name: Oondeo, C.B.
    openshift.io/support-url: https://oondeo.es
    tags: quickstart,php
    template.openshift.io/bindable: 'false'
  name: php-persistent
  namespace: openshift
objects:
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app: ${NAMESPACE}/${NAME}      
    name: mysql-${NAME}
    namespace: openshift-monitoring
  spec:
    endpoints:
    - interval: 30s
      targetPort: 9125
      path: /metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app: ${NAME}
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app: ${NAMESPACE}/${NAME}      
    name: nginx-${NAME}
    namespace: openshift-monitoring
  spec:
    endpoints:
    - interval: 30s
      targetPort: 9113
      path: /metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app: ${NAME}        
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: "${NAME}-crontab"
  data:
    ${NAME}: "*/10 * * * * default curl -k -H 'Host: ${APPLICATION_DOMAIN}' 'https://127.0.0.1:8082/wp-cron.php'"
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: mysql-percona-${NAME}
  data:
    my.cnf: |
      [client]
      socket=/tmp/mysql.sock
      [mysqld]
      socket=/tmp/mysql.sock
      default_authentication_plugin  = mysql_native_password
      character-set-server           = utf8mb4
      collation-server               = utf8mb4_unicode_ci
      default-storage-engine         = InnoDB
      expire-logs-days               = 14
      innodb-file-per-table          = 1
      ;sync_binlog                    = 0
      innodb-flush-log-at-trx-commit = 2
      innodb-flush-method            = O_DIRECT
      innodb-log-files-in-group      = 2
      key-buffer-size                = 32M
      max-allowed-packet             = 16M
      max-connect-errors             = 1000000
      max-connections                = 500
      max-heap-table-size            = 50MB
      myisam-recover-options         = FORCE,BACKUP
      open-files-limit               = 65535
      table-definition-cache         = 4096
      table-open-cache               = 4096
      thread-cache-size              = 50
      tmp-table-size                 = 50MB
      innodb-buffer-pool-instances   = 8
      innodb-buffer-pool-size        = 2048M
      innodb-doublewrite             = 0
      innodb-log-file-size           = 128M
      log_output                     = table
      long_query_time                = 10
      max-binlog-size                = 1G
      slow_query_log                 = 1
      slow_query_log_file            = /dev/stdout
      #skip-host-cache
      skip-name-resolve
      sql_mode = "ONLY_FULL_GROUP_BY,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,ALLOW_INVALID_DATES"
      !includedir /etc/mysql/conf.d  
- apiVersion: v1
  data:
    adminer.conf: |
      [adminer-dev]
      listen = /opt/app-root/var/run/adminer.sock

      listen.mode = 0666
      catch_workers_output = yes
      ;access.log = /proc/self/fd/2
      ;access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"

      pm = dynamic
      pm.max_children = 5
      pm.start_servers = 2
      pm.min_spare_servers = 1
      pm.max_spare_servers = 2
      ;pm.process_idle_timeout = 10s;
      ;pm.max_requests = 500
      php_admin_value[open_basedir] = "/opt/app-root/src:/opt/app-root/var/lib:/usr/share/php:/usr/local/php:/usr/local/lib/php:/usr/local/share/php:/usr/lib/php7:/usr/lib/php:/tmp:/var/tmp:/run/php:/opt/app-root/var/run/php"
      php_admin_value[session.save_path] = "/tmp/sessions"
      php_admin_value[soap.wsdl_cache_dir] = "/tmp"
      php_admin_value[sys_temp_dir] = "/tmp"
      php_admin_value[upload_tmp_dir] = "/var/tmp"
      php_admin_value[memory_limit]="192M"
      php_admin_value[expose_php]= "0"
      php_admin_value[variables_order]="EGPCS"      
      php_value[display_errors] = "0"
      php_value[upload_max_filesize] = "2048M"
      php_value[post_max_size] = "2048M"
      php_value[max_execution_time] = "120"
      php_value[max_input_time] = "120"
      php_value[max_input_vars] = "5000"
      php_value[opcache.revalidate_freq] = "200"
      env[TMP] = "/tmp"
      env[TMPDIR] = "/tmp"
      env[TEMP] = "/tmp"  
    ${APPLICATION_DOMAIN}-dev.conf: |
      ; Start a new pool named 'www'.
      ; the variable $pool can be used in any directive and will be replaced by the
      ; pool name ('www' here)    
      [${APPLICATION_DOMAIN}-dev]
      listen = /opt/app-root/var/run/${APPLICATION_DOMAIN}-dev.sock

      listen.mode = 0666
      catch_workers_output = yes
      ;access.log = /proc/self/fd/2
      ;access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"

      pm = dynamic
      pm.max_children = 5
      pm.start_servers = 2
      pm.min_spare_servers = 1
      pm.max_spare_servers = 3
      ;pm.process_idle_timeout = 10s;
      ;pm.max_requests = 500
      php_admin_value[open_basedir] = "/opt/app-root/src/${APPLICATION_DOMAIN}-dev:/opt/app-root/var/lib:/usr/share/php:/usr/local/php:/usr/local/lib/php:/usr/local/share/php:/usr/lib/php7:/usr/lib/php:/tmp/${APPLICATION_DOMAIN}-dev:/var/tmp/${APPLICATION_DOMAIN}-dev:/run/php:/opt/app-root/var/run/php"
      php_admin_value[session.save_path] = "/tmp/${APPLICATION_DOMAIN}-dev"
      php_admin_value[soap.wsdl_cache_dir]= "/tmp/${APPLICATION_DOMAIN}-dev"
      php_admin_value[sys_temp_dir] = "/tmp/${APPLICATION_DOMAIN}-dev"
      php_admin_value[upload_tmp_dir] = "/tmp/${APPLICATION_DOMAIN}-dev"
      php_admin_value[memory_limit]="192M"
      php_admin_value[expose_php]= "0"
      php_admin_value[variables_order]="EGPCS"      
      php_value[display_errors] = "0"
      php_value[upload_max_filesize] = "32M"
      php_value[post_max_size] = "32M"
      php_value[max_execution_time] = "60"
      php_value[max_input_time] = "60"
      php_value[max_input_vars] = "5000"
      php_value[opcache.revalidate_freq] = "20"
      env[TMP] = "/tmp/${APPLICATION_DOMAIN}-dev"
      env[TMPDIR] = "/tmp/${APPLICATION_DOMAIN}-dev"
      env[TEMP] = "/tmp/${APPLICATION_DOMAIN}-dev"
    ${APPLICATION_DOMAIN}.conf: |
      ; Start a new pool named 'www'.
      ; the variable $pool can be used in any directive and will be replaced by the
      ; pool name ('www' here)
      [${APPLICATION_DOMAIN}]
      listen = /opt/app-root/var/run/${APPLICATION_DOMAIN}.sock

      catch_workers_output = yes

      listen.mode = 0666
      ;access.log = /proc/self/fd/2
      ;slowlog = /proc/self/fd/2 
      ;access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"

      pm = static
      pm.max_children = 6
      pm.start_servers = 4
      pm.min_spare_servers = 2
      pm.max_spare_servers = 5
      ;pm.process_idle_timeout = 10s;
      pm.max_requests = 50000
      php_admin_value[open_basedir] = "/opt/app-root/src/${APPLICATION_DOMAIN}:/opt/app-root/var/lib:/usr/share/php:/usr/local/php:/usr/local/lib/php:/usr/local/share/php:/usr/lib/php7:/usr/lib/php:/tmp/${APPLICATION_DOMAIN}:/var/tmp/${APPLICATION_DOMAIN}:/run/php:/opt/app-root/var/run/php"
      php_admin_value[session.save_path] = "/tmp/${APPLICATION_DOMAIN}"
      php_admin_value[soap.wsdl_cache_dir] = "/tmp/${APPLICATION_DOMAIN}"
      php_admin_value[sys_temp_dir] = "/tmp/${APPLICATION_DOMAIN}"
      php_admin_value[upload_tmp_dir] = "/var/tmp/${APPLICATION_DOMAIN}"
      php_admin_value[memory_limit]="192M"
      php_admin_value[expose_php]= "0"
      php_admin_value[variables_order]="EGPCS"      
      php_value[display_errors] = "0"
      php_value[upload_max_filesize] = "32M"
      php_value[post_max_size] = "32M"
      php_value[max_execution_time] = "60"
      php_value[max_input_time] = "60"
      php_value[max_input_vars] = "5000"
      php_value[opcache.revalidate_freq] = "20"
      env[TMP] = "/tmp/${APPLICATION_DOMAIN}"
      env[TMPDIR] = "/tmp/${APPLICATION_DOMAIN}"
      env[TEMP] = "/tmp/${APPLICATION_DOMAIN}"
  kind: ConfigMap
  metadata:
    name: "${NAME}-php"
- apiVersion: v1
  data:
    00-common.conf: |
                    #include /etc/nginx/conection_params;
                    include /etc/nginx/cache_params;
                    include /etc/nginx/gzip_params;
                    #include naxsi/naxsi_core.rules;

                    # Only on server block
                    #client_header_buffer_size    1k;
                    # Only on server block
                    #large_client_header_buffers  4 8k;

                    # If the client stops reading data, free up the stale client connection after this much time. Default 60.
                    #send_timeout 6;
                    # Only on server block
                    #client_header_timeout  3m;

                    # Location order
                    # = (exactly) : location = /path
                    # ^~ (forward match) : location ^~ /path
                    # ~ (regular expression case sensitive) : location ~ /path/
                    # ~* (regular expression case insensitive) : location ~* .(jpg|png|bmp)
                    # / : location /path


                    # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
                    # Connection header that may have been passed to this server
                    map $http_upgrade $proxy_connection {
                      default upgrade;
                      '' close;
                    }

                    limit_req_zone $binary_remote_addr zone=one:1m rate=10r/s;
                    limit_req_zone $binary_remote_addr zone=public:1m rate=20r/s;        
    ${APPLICATION_DOMAIN}.conf: |
                
                    server {
                        listen 8080 default_server;
                        server_name _;
                        access_log off;
                        location ^~ /.well-known/acme-challenge/ {
                                        access_log off;
                                        log_not_found off;
                                        root /var/lib/letsencrypt;
                                        autoindex off;
                                        index index.html;
                                        try_files $uri $uri/ =404;
                        }                           
                        return 301 https://$http_host$request_uri;
                    }
                    server {
                        listen 8082  ssl http2 default_server;
                        server_name _;
                        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
                        ssl_certificate /opt/app-root/var/nginx/ssl/${APPLICATION_DOMAIN}/tls.pem;
                        ssl_certificate_key /opt/app-root/var/nginx/ssl/${APPLICATION_DOMAIN}/tls.key;
                        access_log off;
                        location ^~ /.well-known/acme-challenge/ {
                                        access_log off;
                                        log_not_found off;
                                        root /var/lib/letsencrypt;
                                        autoindex off;
                                        index index.html;
                                        try_files $uri $uri/ =404;
                        }                           
                        return 301 https://$http_host$request_uri;
                    }                    
                    server {
                        listen 8082  ssl http2;
                        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
                        ssl_certificate /opt/app-root/var/nginx/ssl/${APPLICATION_DOMAIN}/tls.pem;
                        ssl_certificate_key /opt/app-root/var/nginx/ssl/${APPLICATION_DOMAIN}/tls.key;

                        server_name ${APPLICATION_DOMAIN} www.${APPLICATION_DOMAIN};
    

                        access_log off;

                        include error_page_params;
                        include server_cache_params;

                        root /opt/app-root/src/${APPLICATION_DOMAIN}/public_html;
                        index index.html index.htm index.php;

                        location ^~ /.well-known/acme-challenge/ {
                                        access_log off;
                                        log_not_found off;
                                        root /var/lib/letsencrypt;
                                        autoindex off;
                                        index index.html;
                                        try_files $uri $uri/ =404;
                        }                        
                        # this prevents hidden files (beginning with a period) from being served
                        location ~ /\.          { access_log off; log_not_found off; deny all; }
                        location = /xmlrpc.php { return 404; }
                        location ~* /wp-content/uploads/\.(hh|php)$ {
                            access_log /dev/stderr main;
                            return 404;
                        }

                        # Setup var defaults on begin server block
                        set $no_cache "0";
                        
                        # If non GET/HEAD, don't cache & mark user as uncacheable for 1 second via cookie
                        #We have a map doing this
                        if ($request_method !~ ^(GET|HEAD)$) {
                            set $no_cache "1";
                        }
                        
                        #Don't cache if the URL contains a query string
                        #if ($query_string != ""){
                        #    set $no_cache "1";
                        #}
                        
                        if ($http_cookie ~* "(comment_author|wp\-postpass|w3tc_logged_out|wordpress_logged_in|wptouch_switch_toggle|w3tc_preview)") {
                            set $no_cache "1";
                        }                        
                        include /opt/app-root/src/${APPLICATION_DOMAIN}/nginx.conf;

                        location ~* .(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
                                expires max;
                                log_not_found off;
                                access_log off;
                                aio threads=default;
                        }
                        location = /robots.txt {
                                access_log off;
                                log_not_found off;
                        }
                        location = /favicon.ico {
                          expires max;
                          log_not_found off;
                          access_log off;
                        }
                                

                        location = /wp-admin/load-scripts.php$ { return 420; }
                        location = /wp-admin/load-styles.php$ { return 420; }
                        location = /wp-includes/js/tinymce/wp-tinymce.php$ { return 420; }
                        location = /wp-content/plugins/td-composer/includes/wpeditor.php$ { return 420; }
                        location /wp-admin/admin-ajax.php {
                            limit_req zone=public burst=8 nodelay;
                            if ( $args ~ "action=wpswmgr_serve" ) {
                                #cache
                                # return 420;
                                #block
                                return 403; 
                            }                         
                        }

                        location /wp-admin {
                            # limit_req zone=one burst=8 nodelay;
                            index index.php;
                            set $no_cache 1;
                        }
                        # location /wp-login.php {
                        #     limit_req zone=one burst=4 nodelay;                        
                        # }
                        location /wp-cron.php {
                            allow 127.0.0.1;
                            deny all;            
                        }   
                        error_page 420 =200 @cache_php;

                        location @cache_php{
                                fastcgi_pass_header 'Accept-Encoding ""';
                                fastcgi_param Upgrade           $http_upgrade;
                                fastcgi_param Connection        "upgrade";
                                fastcgi_param Host              $host;
                                fastcgi_param X-Real-IP         $remote_addr;
                                fastcgi_param X-Forwarded-For   $proxy_add_x_forwarded_for;
                                fastcgi_param X-Forwarded-Proto $scheme;
                                fastcgi_param X-Forwarded-Host  $host;
                                fastcgi_param X-Forwarded-Port  443;          
                                add_header X-Fastcgi-Cache-Skip $no_cache;                                           
                                add_header X-Fastcgi-Cache $upstream_cache_status;
                                fastcgi_no_cache $no_cache;
                                fastcgi_cache_bypass $no_cache;                                
                                fastcgi_pass_header Set-Cookie;
                                fastcgi_pass_header Cookie;
                                fastcgi_cache microcache;
                                fastcgi_cache_valid 404 30m;
                                fastcgi_cache_valid 200 301 302 10s;
                                fastcgi_cache_lock_timeout 6s;
                                #fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
                                fastcgi_pass  unix:/opt/app-root/var/run/${APPLICATION_DOMAIN}.sock;
                                fastcgi_index index.php;
                                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                                fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                                fastcgi_param HTTPS $fe_https;
                                # fastcgi_param  PHP_VALUE   "auto_prepend_file=/opt/app-root/var/lib/yaxgui/external/header.php";

                                include fastcgi_params;
                                # CAche does not work with fastcgi_buffering off;  
                                #fastcgi_buffer_size 64k;
                                #fastcgi_buffers 8 16k;
                                #fastcgi_busy_buffers_size 64k;                                         
                        }                                             
                        location = /index.php {
                            # try_files $uri =404;

                            ## Naxsi rules
                            #include fastcgi_naxsi_params

                            #Bypass cache
                            #{{NGINX_CACHE}}


                            # include fastcgi_cache_params;
                            add_header X-Index-Cache-Skip $no_cache;
                            add_header X-Index-Cache $upstream_cache_status;
                            # Allow caching of requests which contain the following headers.
                            fastcgi_pass_header Set-Cookie;
                            fastcgi_pass_header Cookie;
                            # fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
                            
                            fastcgi_no_cache $no_cache;
                            fastcgi_cache_bypass $no_cache;
                            
                            fastcgi_cache microcache;
                            fastcgi_cache_valid 404 30m;
                            fastcgi_cache_valid 200 301 302 20s;
                            fastcgi_cache_lock_timeout 6s;      
                            # /fastcgi_cache_params                      

                            fastcgi_pass_header 'Accept-Encoding ""';
                            fastcgi_param Upgrade           $http_upgrade;
                            fastcgi_param Connection        "upgrade";
                            fastcgi_param Host              $host;
                            fastcgi_param X-Real-IP         $remote_addr;
                            fastcgi_param X-Forwarded-For   $proxy_add_x_forwarded_for;
                            fastcgi_param X-Forwarded-Proto $scheme;
                            fastcgi_param X-Forwarded-Host  $host;
                            fastcgi_param X-Forwarded-Port  443;

                            #fastcgi_pass 127.0.0.1:9000;
                            fastcgi_pass  unix:/opt/app-root/var/run/${APPLICATION_DOMAIN}.sock;
                            fastcgi_index index.php;
                            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                            fastcgi_param HTTPS $fe_https;
                            #fastcgi_param  PHP_VALUE   "auto_prepend_file=/usr/local/share/php/yaxgui/external/header.php";

                            include fastcgi_params;
                            # CAche does not work with fastcgi_buffering off;
                            #fastcgi_buffer_size 64k;
                            #fastcgi_buffers 8 16k;
                            #fastcgi_busy_buffers_size 64k;                            

                        }                                             
                        location ~ \.(hh|php)$ {
                            try_files $uri =404;

                            ## Naxsi rules
                            #include fastcgi_naxsi_params

                            #Bypass cache
                            #{{NGINX_CACHE}}


                            # include fastcgi_cache_params;

                            fastcgi_pass_header 'Accept-Encoding ""';
                            fastcgi_param Upgrade           $http_upgrade;
                            fastcgi_param Connection        "upgrade";
                            fastcgi_param Host              $host;
                            fastcgi_param X-Real-IP         $remote_addr;
                            fastcgi_param X-Forwarded-For   $proxy_add_x_forwarded_for;
                            fastcgi_param X-Forwarded-Proto $scheme;
                            fastcgi_param X-Forwarded-Host  $host;
                            fastcgi_param X-Forwarded-Port  443;

                            #fastcgi_pass 127.0.0.1:9000;
                            fastcgi_pass  unix:/opt/app-root/var/run/${APPLICATION_DOMAIN}.sock;
                            fastcgi_index index.php;
                            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                            fastcgi_param HTTPS $fe_https;
                            #fastcgi_param  PHP_VALUE   "auto_prepend_file=/usr/local/share/php/yaxgui/external/header.php";

                            include fastcgi_params;

                            # Fascgi conection paramas
                            #X-Accel-Buffering
                            fastcgi_buffering off;
                            #fastcgi_buffer_size 64k;
                            #fastcgi_buffers 8 16k;
                            #fastcgi_busy_buffers_size 64k;
                            fastcgi_read_timeout 600;
                            fastcgi_send_timeout 600;
                            fastcgi_connect_timeout 600;

                            # send the client a "request timed out" if the body is not loaded by this time. Default 60.
                            client_body_timeout 10m;
                            client_max_body_size 64M;
                            client_body_buffer_size     4M;  
                            send_timeout 600;                          

                        }

                        location / {
                            #try_files /index.html /index.htm $uri $uri/ /index.php$is_args$args;
                            try_files /index.html /index.htm $uri $uri/ /index.php$is_args$args;
                        }                        

                    }
    ${APPLICATION_DOMAIN}-dev.conf: |
                    server {
                        listen 8081 default_server;
                        server_name _;

                        access_log off;

                        include error_page_params;
                        include server_cache_params;

                        root /opt/app-root/src/${APPLICATION_DOMAIN}-dev/public_html;
                        index index.html index.htm index.php;

                        # this prevents hidden files (beginning with a period) from being served
                        location ~ /\.          { access_log off; log_not_found off; deny all; }

                        location ~* .(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
                                expires max;
                                log_not_found off;
                                access_log off;
                                aio threads=default;
                        }
                        location = /robots.txt {
                                access_log off;
                                log_not_found off;
                        }
                        location = /favicon.ico {
                          expires max;
                          log_not_found off;
                          access_log off;
                        }

                        location ^~ /wp-content/uploads {
                          location ~* /wp-content/uploads/\.(hh|php)$ {
                              access_log /dev/stderr main;  
                              return 404;
                          }
                          try_files $uri /../../${APPLICATION_DOMAIN}/public_html/$uri =404;
                        }
                        location /wp-admin/admin-ajax.php {
                            limit_req zone=public burst=8 nodelay;
                            if ( $args ~ "action=wpswmgr_serve" ) {
                                return 420;
                            }                         
                        }
                        location = /xmlrpc.php { return 404; }
                        location /wp-admin {
                            limit_req zone=one burst=8 nodelay;
                            index index.php;
                            set $no_cache 1;
                        }
                        location /wp-login.php {
                            limit_req zone=one burst=4 nodelay;                        
                        }
                        location /wp-cron.php {
                            allow 127.0.0.1;
                            deny all;            
                        }   
                        error_page 420 =200 @cache_php;
                        error_page 420 =200 @cache_php;

                        location @cache_php{

                                fastcgi_cache microcache;
                                fastcgi_cache_valid 404 30m;
                                fastcgi_cache_valid 200 301 302 10m;
                                fastcgi_cache_lock_timeout 6s;
                                fastcgi_pass  unix:/opt/app-root/var/run/${APPLICATION_DOMAIN}.sock;
                                fastcgi_index index.php;
                                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                                fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                                fastcgi_param HTTPS $fe_https;
                                # fastcgi_param  PHP_VALUE   "auto_prepend_file=/opt/app-root/var/lib/yaxgui/external/header.php";

                                include fastcgi_params;           
                        }                                             
                        location = /index.php {
                            # try_files $uri =404;

                            ## Naxsi rules
                            #include fastcgi_naxsi_params

                            #Bypass cache
                            #{{NGINX_CACHE}}


                            include fastcgi_cache_params;

                            # fastcgi_pass_header 'Accept-Encoding ""';

                            #fastcgi_pass 127.0.0.1:9000;
                            fastcgi_pass  unix:/opt/app-root/var/run/${APPLICATION_DOMAIN}.sock;
                            fastcgi_index index.php;
                            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                            fastcgi_param HTTPS $fe_https;
                            #fastcgi_param  PHP_VALUE   "auto_prepend_file=/usr/local/share/php/yaxgui/external/header.php";

                            include fastcgi_params;

                        }                                             
                        location ~ \.(hh|php)$ {
                            try_files $uri =404;

                            ## Naxsi rules
                            #include fastcgi_naxsi_params

                            #Bypass cache
                            #{{NGINX_CACHE}}


                            # include fastcgi_cache_params;

                            # fastcgi_pass_header 'Accept-Encoding ""';

                            #fastcgi_pass 127.0.0.1:9000;
                            fastcgi_pass  unix:/opt/app-root/var/run/${APPLICATION_DOMAIN}.sock;
                            fastcgi_index index.php;
                            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                            fastcgi_param HTTPS $fe_https;
                            #fastcgi_param  PHP_VALUE   "auto_prepend_file=/usr/local/share/php/yaxgui/external/header.php";

                            include fastcgi_params;

                            # Fascgi conection paramas
                            #X-Accel-Buffering
                            fastcgi_buffer_size 64k;
                            fastcgi_buffers 8 16k;
                            fastcgi_busy_buffers_size 64k;
                            fastcgi_read_timeout 600;
                            fastcgi_send_timeout 600;
                            fastcgi_connect_timeout 600;

                            # send the client a "request timed out" if the body is not loaded by this time. Default 60.
                            client_body_timeout 10m;
                            client_max_body_size 64M;
                            client_body_buffer_size     4M;  
                            send_timeout 600;                          

                        }

                    }
  kind: ConfigMap
  metadata:
    name: ${NAME}-nginx
- apiVersion: v1
  data:
    00-common.conf: |  
                    #include /etc/nginx/conection_params;
                    include /etc/nginx/cache_params;
                    include /etc/nginx/gzip_params;
                    #include naxsi/naxsi_core.rules;

                    # Only on server block
                    #client_header_buffer_size    1k;
                    # Only on server block
                    #large_client_header_buffers  4 8k;

                    # If the client stops reading data, free up the stale client connection after this much time. Default 60.
                    #send_timeout 6;
                    # Only on server block
                    #client_header_timeout  3m;

                    # Location order
                    # = (exactly) : location = /path
                    # ^~ (forward match) : location ^~ /path
                    # ~ (regular expression case sensitive) : location ~ /path/
                    # ~* (regular expression case insensitive) : location ~* .(jpg|png|bmp)
                    # / : location /path


                    # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
                    # Connection header that may have been passed to this server
                    map $http_upgrade $proxy_connection {
                      default upgrade;
                      '' close;
                    }
    ${APPLICATION_DOMAIN}-dev.conf: |
                    server {

                      listen 1080;
                      server_name _;  
                      access_log /dev/stderr main;                      
                      location / {

                        # replace request
                        #header_filter_by_lua
                        access_by_lua_block{

                          if ngx.req.get_method() == "POST" then   
                              ngx.req.read_body()
                              local data = ngx.req.get_body_data() 
                              if data then
                                local newargs, n, err = ngx.re.gsub(data, "$host", "ngx.var.domain_prod") 
                                ngx.req.set_body_data(newargs)
                              end
                              local file = ngx.req.get_body_file()
                              if file then                                                                                         
                                local newargs, n, err = ngx.re.gsub(file, "$host", "ngx.var.domain_prod")
                                ngx.req.set_body_data(newargs)
                              end 
                          else
                            local args = ngx.req.get_uri_args()
                            local newargs = {}
                            for key, val in pairs(args) do
                              if type(val) == "string" then
                                local newval, n , err =  ngx.re.gsub(val, "$host", "ngx.var.domain_prod")
                                newargs[key]=newval
                              else
                                newargs[key]=val
                              end
                            end
                                  ngx.req.set_uri_args(newargs)
                          end

                        }

                        #   #rewrite reponse
                        #     body_filter_by_lua_block{
                        #local resp_body = string.sub(ngx.arg[1], 1, 1000)  -- arg[1] contains a chunk of response content
                        #ngx.ctx.buffered = string.sub((ngx.ctx.buffered or "") .. resp_body, 1, 1000)
                        #if ngx.arg[2] and ngx.req.get_method() == "POST" then  -- arg[2] is true if this is the last chunk
                        #  ngx.log(ngx.STDERR,ngx.ctx.buffered)
                        #end  
                        #   }

                        #set $rewrite_server 127.0.0.1;
                        #set $rewrite_server_port 8083;
                        proxy_pass http://127.0.0.1:8081;
                        
                        fastcgi_param Host ${APPLICATION_DOMAIN}; 
                        fastcgi_param Forwarded  "for=$http_x_forwarded_for;host=${APPLICATION_DOMAIN};port=$http_x_forwarded_port;proto=$http_x_forwarded_proto"; 
                        fastcgi_param X-Forwarded-Host  ${APPLICATION_DOMAIN}; 
                        add_header Access-Control-Allow-Origin "*";

                        proxy_redirect                  http://${APPLICATION_DOMAIN}/ $http_x_forwarded_proto://$http_x_forwarded_host:$http_x_forwarded_port/;
                        proxy_redirect                  https://${APPLICATION_DOMAIN}/ $http_x_forwarded_proto://$http_x_forwarded_host:$http_x_forwarded_port/; 
                        proxy_redirect                  http://${APPLICATION_DOMAIN}:8081/ $http_x_forwarded_proto://$http_x_forwarded_host:$http_x_forwarded_port/;
                        proxy_redirect                  https://${APPLICATION_DOMAIN}:8081/ $http_x_forwarded_proto://$http_x_forwarded_host:$http_x_forwarded_port/;          
                    

                      
                        #rewrite response
                        proxy_cookie_domain             "${APPLICATION_DOMAIN}" "$host";
                        sub_filter_once off;
                        sub_filter_types *;                                                         
                        sub_filter "${APPLICATION_DOMAIN}" "$host" ;
                      }
                      location /xhprof_html {
                        root /opt/app-root/var/run/php/yaxgui;
                        location ~ /\.          { access_log off; log_not_found off; deny all; }
                        try_files $uri $uri/ =404;
            
                        location ~ \.(hh|php)$ {
                            #try_files $uri =404;
                            ## Naxsi rules
                            #include fastcgi_naxsi_params

                            #Bypass cache
                            #{{NGINX_CACHE}}


                            # include fastcgi_cache_params;

                            fastcgi_pass_header 'Accept-Encoding ""';

                            fastcgi_pass  unix:/opt/app-root/var/run/adminer.sock;
                            fastcgi_index index.php;
                            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                            fastcgi_param HTTPS $fe_https;
                            #fastcgi_param  PHP_VALUE   "auto_prepend_file=/usr/local/share/php/yaxgui/external/header.php";

                            include fastcgi_params;

                            # Fascgi conection paramas
                            #X-Accel-Buffering
                            fastcgi_buffer_size 64k;
                            fastcgi_buffers 8 16k;
                            fastcgi_busy_buffers_size 64k;
                            fastcgi_read_timeout 600;
                            fastcgi_send_timeout 600;
                            fastcgi_connect_timeout 600;

                            # send the client a "request timed out" if the body is not loaded by this time. Default 60.
                            client_body_timeout 10m;
                            client_max_body_size 64M;
                            client_body_buffer_size     4M;  
                            send_timeout 600;                          
                      
                        }
                      }                         
                      location = /adminer.php {
                            try_files $uri =404;
                            
                            root /opt/app-root/var/run/php/public_html;
                            ## Naxsi rules
                            #include fastcgi_naxsi_params

                            #Bypass cache
                            #{{NGINX_CACHE}}


                            include fastcgi_cache_params;

                            # fastcgi_pass_header 'Accept-Encoding ""';

                            #fastcgi_pass 127.0.0.1:9000;
                            fastcgi_pass  unix:/opt/app-root/var/run/adminer.sock;
                            fastcgi_index index.php;
                            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                            fastcgi_param HTTPS $fe_https;
                            
                            include fastcgi_params;

                            # Fascgi conection paramas
                            #X-Accel-Buffering
                            fastcgi_buffer_size 64k;
                            fastcgi_buffers 8 16k;
                            fastcgi_busy_buffers_size 64k;
                            fastcgi_read_timeout 600;
                            fastcgi_send_timeout 600;
                            fastcgi_connect_timeout 600;

                            # send the client a "request timed out" if the body is not loaded by this time. Default 60.
                            client_body_timeout 10m;
                            client_max_body_size 64M;
                            client_body_buffer_size     4M;  
                            send_timeout 600;                                                       
                      }

                    }
  kind: ConfigMap
  metadata:
    name: ${NAME}-nginx-dev
- apiVersion: v1
  kind: Secret
  metadata:
    name: "${NAME}"
  stringData:
    mysql-root-password: "${DATABASE_PASSWORD}"
    database-password: "${DATABASE_PASSWORD}"
    database-user: "${DATABASE_USER}"
    database-name: "${DATABASE_NAME}"
    ftp-users: "${FTP_USER}:${FTP_PASSWORD}:/opt/app-root/src"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      # service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
      #   "kind": "Service"}]'
    name: "${NAME}"
  spec:
    ports:
    - name: web
      port: 80
      targetPort: 8080
    - name: web-dev
      port: 8081
      targetPort: 8081
    - name: web-ssl
      port: 443
      targetPort: 8082
    selector:
      name: "${NAME}"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      # service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
      #   "kind": "Service"}]'
    name: "${NAME}-dev"
  spec:
    ports:
    - name: web
      port: 1080
      targetPort: 1080
    selector:
      name: "${NAME}"   
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
    name: ${NAME}-ftp
  spec:
    ports:
    - name: ftp-data
      port: 20
      protocol: TCP
      targetPort: 10020
    - name: ftp
      port: 21
      protocol: TCP
      targetPort: 10021
    - name: passive0
      port: 60000
      protocol: TCP
      targetPort: 60000
    - name: passive1
      port: 60001
      protocol: TCP
      targetPort: 60001
    - name: passive2
      port: 60002
      protocol: TCP
      targetPort: 60002
    - name: passive3
      port: 60003
      protocol: TCP
      targetPort: 60003
    - name: passive4
      port: 60004
      protocol: TCP
      targetPort: 60004
    - name: passive5
      port: 60005
      protocol: TCP
      targetPort: 60005
    - name: passive6
      port: 60006
      protocol: TCP
      targetPort: 60006
    - name: passive7
      port: 60007
      protocol: TCP
      targetPort: 60007
    - name: passive8
      port: 60008
      protocol: TCP
      targetPort: 60008
    - name: passive9
      port: 60009
      protocol: TCP
      targetPort: 60009
    - name: passive10
      port: 60010
      protocol: TCP
      targetPort: 60010
    selector:
      name: ${NAME}
    type: ClusterIP
# - apiVersion: certmanager.k8s.io/v1alpha1
#   kind: Certificate
#   metadata:
#     name: ${NAME}
#   spec:
#     secretName: ${NAME}-tls
#     issuerRef:
#       name: le
#       kind: ClusterIssuer
#     commonName: APPLICATION_DOMAIN
#     dnsNames:
#     - www.${APPLICATION_DOMAIN}
#     acme:
#       config:
#         - http01: {}
#           domains:
#           - ${APPLICATION_DOMAIN}
#           - www.${APPLICATION_DOMAIN}       
- apiVersion: v1
  kind: Route
  metadata:
    name: "${NAME}"
  spec:
    host: "${APPLICATION_DOMAIN}"
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: passthrough    
    port:
      targetPort: web-ssl    
    to:
      kind: Service
      name: "${NAME}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: "${NAME}"
  spec:
    replicas: 1
    selector:
      name: "${NAME}"
    strategy:
      # recreateParams:
      #   pre:
      #     execNewPod:
      #       command:
      #       - "/usr/libexec/s2i/bin/migrate-database.sh"
      #       containerName: php
      #     failurePolicy: Retry
      type: Recreate
      # type: Rolling
    template:
      metadata:
        labels:
          name: "${NAME}"
        name: "${NAME}"
      spec:
        initContainers:
        - args:
          - files-config
          command:
          - bash
          - -c
          - |
            set -ex
            cp /mnt/config-map/my.cnf /mnt/conf.d/
            mkdir -p /mnt/conf.d/conf.d
          env:
          - name: MY_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: MY_SERVICE_NAME
            value: mysql-mysql-nodes
          - name: MY_CLUSTER_NAME
            value: mysql
          - name: MY_FQDN
            value: $(MY_POD_NAME).$(MY_SERVICE_NAME).$(MY_NAMESPACE)
          - name: ORCHESTRATOR_URI
            value: http://mysql-orchestrator.default/api
          image: percona/percona-server:8.0
          imagePullPolicy: IfNotPresent
          name: init-mysql
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /mnt/conf.d
            name: mysql-conf
          - mountPath: /mnt/config-map
            name: mysql-init-conf
        - image: "php"
          name: init-php
          volumeMounts:
          - mountPath: "/tmp"
            name: "tmp"           
          - mountPath: "/opt/app-root/var/run"
            name: "run"         
          command:
          - |
            cp -a /usr/local/share/php/php /opt/app-root/var/run/
            cp /opt/app-root/var/run/php/yaxgui/xhprof_lib/config.sample.php /opt/app-root/var/run/php/yaxgui/xhprof_lib/config.php
        - image: certbot/certbot
          command:  
          # openssl req -x509 -out localhost.crt -keyout localhost.key \
          #   -newkey rsa:2048 -nodes -sha256 \
          #   -subj '/CN=localhost' -extensions EXT -config <( \
          #    printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")          
          - /bin/sh
          - "-c"
          - |
            cd /tmp
            printf "[dn]\nCN=${APPLICATION_DOMAIN}\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:${APPLICATION_DOMAIN}\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth" > ssl.conf
            openssl req -x509 -out cert1.pem -keyout privkey1.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=${APPLICATION_DOMAIN}' -extensions EXT -config ssl.conf
            mkdir -p /etc/letsencrypt/archive_init/${APPLICATION_DOMAIN} /etc/letsencrypt/live/${APPLICATION_DOMAIN}
            echo "" > /etc/letsencrypt/archive_init/${APPLICATION_DOMAIN}/chain1.pem
            cp cert1.pem /etc/letsencrypt/archive_init/${APPLICATION_DOMAIN}/cert1.pem
            cp cert1.pem /etc/letsencrypt/archive_init/${APPLICATION_DOMAIN}/fullchain1.pem
            cp privkey1.pem /etc/letsencrypt/archive_init/${APPLICATION_DOMAIN}/privkey1.pem
            if [ ! -e /etc/letsencrypt/live/${APPLICATION_DOMAIN}/privkey.pem ]; then
              ln -s /etc/letsencrypt/archive_init/${APPLICATION_DOMAIN}/cert1.pem /etc/letsencrypt/live/${APPLICATION_DOMAIN}/cert.pem
              ln -s /etc/letsencrypt/archive_init/${APPLICATION_DOMAIN}/chain1.pem /etc/letsencrypt/live/${APPLICATION_DOMAIN}/chain.pem
              ln -s /etc/letsencrypt/archive_init/${APPLICATION_DOMAIN}/fullchain1.pem /etc/letsencrypt/live/${APPLICATION_DOMAIN}/fullchain.pem
              ln -s /etc/letsencrypt/archive_init/${APPLICATION_DOMAIN}/privkey1.pem /etc/letsencrypt/live/${APPLICATION_DOMAIN}/privkey.pem
            fi
            exit 0
          name: init-certbot
          volumeMounts:
          - mountPath: "/opt/app-root/etc/conf.d"
            name: "nginx-config"          
          - mountPath: "/var/www"
            name: "le-www"
          - mountPath: "/etc/letsencrypt"
            name: "data"  
            subPath: letsencrypt        
        containers:
        - image: docker.io/redis
          name: redis
          env:
          - name: ALLOW_EMPTY_PASSWORD
            value: yes
          volumeMounts:
          - mountPath: /var/run
            name: "run"        
        - env:
          - name: MY_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: MY_SERVICE_NAME
            value: mysql-mysql-nodes
          - name: MY_CLUSTER_NAME
            value: mysql
          - name: MY_FQDN
            value: $(MY_POD_NAME).$(MY_SERVICE_NAME).$(MY_NAMESPACE)
          - name: ORCHESTRATOR_URI
            value: http://mysql-orchestrator.default/api
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mysql-root-password
                name: ${NAME}
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
                optional: true
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
                optional: true
          - name: MYSQL_DATABASE
            value: ${DATABASE_NAME}
          image: percona/percona-server:8.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - mysqladmin
              - -u root
              - -p$MYSQL_ROOT_PASSWORD
              - ping
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          name: mysql
          ports:
          - containerPort: 3306
            name: mysql
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - mysqladmin
              - -u root
              - -p$MYSQL_ROOT_PASSWORD
              - ping
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 800m
              memory: 8G
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/mysql
            name: mysql-conf
          - mountPath: /var/lib/mysql
            name: ${NAME}-data
            subPath: mysql
          - mountPath: /tmp
            name: tmp
        - args:
          - --web.listen-address=0.0.0.0:9125
          - --web.telemetry-path=/metrics
          env:
          - name: MY_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: MY_SERVICE_NAME
            value: mysql-mysql-nodes
          - name: MY_CLUSTER_NAME
            value: mysql
          - name: MY_FQDN
            value: $(MY_POD_NAME).$(MY_SERVICE_NAME).$(MY_NAMESPACE)
          - name: ORCHESTRATOR_URI
            value: http://mysql-orchestrator.default/api
          - name: USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
          - name: PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
          - name: DATA_SOURCE_NAME
            value: $(USER):$(PASSWORD)@(127.0.0.1:3306)/
          image: prom/mysqld-exporter:v0.12.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: 9125
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          name: mysql-metrics-exporter
          ports:
          - containerPort: 9125
            name: prometheus-mysql
            protocol: TCP
          resources:
            limits:
              cpu: 100m
            requests:
              cpu: 10m
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - args:
            - '--web.listen-address=0.0.0.0:9113'
            - '--web.telemetry-path=/metrics'
          env:
            - name: MY_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          image: 'nginx/nginx-prometheus-exporter:0.5.0'
          imagePullPolicy: IfNotPresent
          name: nginx-metrics-exporter
          ports:
            - containerPort: 9113
              name: prometheus-nginx
              protocol: TCP
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File          
        - env:
          - name: XHPROF_IPS
            value: "false"
          - name: DATABASE_SERVICE_NAME
            value: "${DATABASE_SERVICE_NAME}"
          - name: DATABASE_ENGINE
            value: "${DATABASE_ENGINE}"
          - name: DATABASE_NAME
            value: "${DATABASE_NAME}"
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: "${NAME}"
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: "${NAME}"
          image: "php"
          name: php         
          volumeMounts:
          - mountPath: "/tmp"
            name: "tmp"           
          - mountPath: "/opt/app-root/var/run"
            name: "run"
          - mountPath: "/opt/app-root/etc/php-fpm.d"
            name: "php-config"
          - mountPath: "/opt/app-root/src"
            name: "data"
            subPath: web                    
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
        - env:
          - name: NGINX_CONF_WATCH_PATH
            value: "/etc/letsencrypt/live"
          - name: DOMAIN_PROD
            value: "${APPLICATION_DOMAIN}"
          - name: NGINX_SSL_PATH
            value: "/etc/letsencrypt/live"
          image: "docker.io/oondeo/nginx"  
          name: "nginx"      
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 8080
            timeoutSeconds: 4
          ports:
          - containerPort: 8080
          - containerPort: 8081
          - containerPort: 8082          
          volumeMounts:
          - mountPath: "/etc/letsencrypt"
            name: "data"  
            subPath: letsencrypt            
          - mountPath: "/var/lib/letsencrypt"
            name: "le-www"             
          - mountPath: "/opt/app-root/etc/conf.d"
            name: "nginx-config"          
          - mountPath: "/opt/app-root/src"
            name: "data"
            subPath: web
          - mountPath: "/opt/app-root/var/run"
            name: "run" 
          - mountPath: "/tmp"
            name: "tmp" 
        - image: "docker.io/oondeo/crond"
          imagePullPolicy: IfNotPresent 
          name: "crond"      
          volumeMounts:
          - mountPath: "/opt/app-root/etc"
            name: "crontab"          
          - mountPath: "/opt/app-root/src"
            name: "data"
            subPath: web
          - mountPath: "/tmp"
            name: "tmp"   
        - image: certbot/certbot
          command:  
          # openssl req -x509 -out localhost.crt -keyout localhost.key \
          #   -newkey rsa:2048 -nodes -sha256 \
          #   -subj '/CN=localhost' -extensions EXT -config <( \
          #    printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")
          # rm -rf /etc/letsencrypt/live/${APPLICATION_DOMAIN}
          #certbot certonly --logs-dir /tmp/logs --work-dir /tmp/letsencrypt --webroot -w /var/www -d www.example.com -d example.com -w /var/www/other -d other.example.net -d another.other.example.net
          - /bin/sh
          - "-c"
          - |
            #set -ex          
            #["sh", "-c", "tail -f /dev/null"]
            ln -s /dev/stdout /tmp/letsencrypt.log
            mkdir /tmp/letsencrypt
            while true
            do 
                sleep 600
                find /tmp/logs -type f -mtime +30 -exec rm -f {} \;
                certbot renew --logs-dir /tmp/logs --work-dir /tmp/letsencrypt --post-hook "/tmp/"
            done
          name: certbot
          volumeMounts:
            - mountPath: "/var/www"
              name: "le-www"
            - mountPath: "/etc/letsencrypt"
              name: "data"  
              subPath: letsencrypt 
        - env:
          - name: DOMAIN_PROD
            value: "${APPLICATION_DOMAIN}"
          image: "docker.io/oondeo/nginx"
          imagePullPolicy: IfNotPresent 
          name: "nginx-dev"      
          ports:
          - containerPort: 1080        
          volumeMounts:
          - mountPath: "/opt/app-root/etc/conf.d"
            name: "nginx-dev-config"          
          - mountPath: "/opt/app-root/src"
            name: "data"
            subPath: web
          - mountPath: "/opt/app-root/var/run"
            name: "run" 
          - mountPath: "/tmp"
            name: "tmp"
        - env:
          - name: ADDRESS
            value: "${FTP_DOMAIN}"
          - name: FTPD_PORT
            value: "10020"
          - name: FTP_PORT
            value: "10021"
          - name: SSH_PORT
            value: "10022"            
          - name: PASSIVE_PORTS
            value: "60000:60010"                     
          image: "docker.io/oondeo/ftpd"
          args: [ 'run','ftpd' ]
          imagePullPolicy: IfNotPresent 
          name: "ftpd"      
          ports:
          - containerPort: 10020
          - containerPort: 10021
          volumeMounts:       
          - mountPath: "/opt/app-root/src"
            name: "data"
            subPath: web
          - mountPath: "/tmp"
            name: "tmp"       
          - mountPath: "/opt/app-root/etc"
            name: ftp-users
            readOnly: true                               
        volumes:
        - name: mysql-conf
          emptyDir: {}
        - name: mysql-init-conf
          configMap:
            name: "mysql-percona-${NAME}"   
        # - name: mysql-data
        #   persistentVolumeClaim:
        #     claimName: mysql-percona-${NAME}      
        - name: "le-www"
          emptyDir: {}                     
        - name: "run"
          emptyDir: {}
        - name: "tmp"
          emptyDir:
            medium: Memory
        - name: "php-config"
          configMap:
            name: "${NAME}-php"
        - name: "crontab"
          configMap:
            name: "${NAME}-crontab"               
        - name: "nginx-config"
          configMap:
            name: "${NAME}-nginx"
        - name: "nginx-dev-config"
          configMap:
            name: "${NAME}-nginx-dev"
        - name: "ftp-users"
          secret:
            secretName: "${NAME}"
            items:
            - key: ftp-users                                            
              path: "user_list"
        - name: "data"
          persistentVolumeClaim:
            claimName: "${NAME}"
        # - name: "${NAME}-tls"
        #   secret: 
        #     secretName: "${NAME}-tls"
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - php
        from:
          kind: ImageStreamTag
          name: "php:7.2-fpm"
          namespace: "${NAMESPACE}"
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${NAME}"
    labels:
      app: "${NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    storageClassName: local-storage
    selector:
      matchLabels:
        name: "${NAME}"        
    resources:
      requests:
        storage: "${VOLUME_CAPACITY}"
# - kind: PersistentVolumeClaim
#   apiVersion: v1
#   metadata:
#     name: mysql-percona-${NAME}
#     labels:
#       app: ${NAME}
#       release: "mysql"
#   spec:
#     accessModes:
#       - "ReadWriteOnce"
#     resources:
#       requests:
#         storage: "${DB_CAPACITY}"
#     storageClassName: "local-storage"
#     selector:
#     matchLabels:
#       name: mysql-percona-"${NAME}"         
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: php-panel
- description: Current namespace, needed to create metrics
  displayName: Namespace
  name: NAMESPACE
  required: true
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
- description: Version of PHP image to be used (7.1 or latest).
  displayName: PHP Version
  name: PHP_VERSION
  required: true
  value: '7.2'
- description: Maximum amount of memory the PHP container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 1024Mi
- description: Volume space available for data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 2Gi
- description: Volume space available for db, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: DB_CAPACITY
  required: true
  value: 2Gi  
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/sclorg/php-ex.git
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: The exposed hostname that will route to the PHP service.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
  required: true
- description: The exposed hostname that will route to the FTP service.
  displayName: FTP Hostname
  name: FTP_DOMAIN
  required: true  
- description: Aditional hostname that will route to the PHP service, no routes are created for this domains, only to create certificates
  displayName: Aditional Application Hostname
  name: APPLICATION_ADDITIONAL_DOMAIN
- description: Github trigger secret.  A difficult to guess string encoded as part
    of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: "[a-zA-Z0-9]{40}"
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: localhost
- description: 'Database engine: postgresql, mysql or sqlite (default).'
  displayName: Database Engine
  name: DATABASE_ENGINE
  required: true
  value: mysql
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: default
- displayName: Database User
  name: DATABASE_USER
  required: true
  value: php
- displayName: Database Password
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  name: DATABASE_PASSWORD
- description: The custom Composer mirror URL
  displayName: Custom Composer Mirror URL
  name: COMPOSER_MIRROR
  value: ''
- displayName: FTP User
  name: FTP_USER
  required: true
  value: admin
- displayName: FTP Password
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  name: FTP_PASSWORD  